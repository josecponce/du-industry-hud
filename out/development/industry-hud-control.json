{"slots":{"0":{"name":"switch","type":{"methods":[],"events":[]}},"1":{"name":"receiverControl","type":{"methods":[],"events":[]}},"2":{"name":"industry1","type":{"methods":[],"events":[]},"class":"IndustryUnit"},"3":{"name":"industry2","type":{"methods":[],"events":[]},"class":"IndustryUnit"},"4":{"name":"industry3","type":{"methods":[],"events":[]},"class":"IndustryUnit"},"5":{"name":"industry5","type":{"methods":[],"events":[]},"class":"IndustryUnit"},"6":{"name":"industry6","type":{"methods":[],"events":[]},"class":"IndustryUnit"},"7":{"name":"industry7","type":{"methods":[],"events":[]},"class":"IndustryUnit"},"8":{"name":"industry8","type":{"methods":[],"events":[]},"class":"IndustryUnit"},"9":{"name":"slot9","type":{"methods":[],"events":[]}},"10":{"name":"slot10","type":{"methods":[],"events":[]}},"11":{"name":"slot11","type":{"methods":[],"events":[]}},"12":{"name":"slot12","type":{"methods":[],"events":[]}},"13":{"name":"slot13","type":{"methods":[],"events":[]}},"14":{"name":"slot14","type":{"methods":[],"events":[]}},"15":{"name":"slot15","type":{"methods":[],"events":[]}},"16":{"name":"slot16","type":{"methods":[],"events":[]}},"17":{"name":"slot17","type":{"methods":[],"events":[]}},"18":{"name":"slot18","type":{"methods":[],"events":[]}},"19":{"name":"slot19","type":{"methods":[],"events":[]}},"20":{"name":"slot20","type":{"methods":[],"events":[]}},"-5":{"name":"library","type":{"methods":[],"events":[]}},"-4":{"name":"system","type":{"methods":[],"events":[]}},"-3":{"name":"player","type":{"methods":[],"events":[]}},"-2":{"name":"construct","type":{"methods":[],"events":[]}},"-1":{"name":"unit","type":{"methods":[],"events":[]}}},"handlers":[{"key":44,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"function library.addEventHandlers(a)if not a or a.onEvent and a.triggerEvent then return false end;if'table'~=type(a)then error('You can only add event handlers to table objects!')end;local b=0;local c={}a.onEvent=function(self,d,e,f)if'function'~=type(e)then error('Event handler must be a function!')end;f=f or self;if'table'~=type(f)then error('The value of self must be a table!')end;if not c[d]then c[d]={}end;b=b+1;c[d][b]={e,f}return b end;a.clearEvent=function(self,d,g)if c[d]and c[d][g]then c[d][g]=nil end end;a.triggerEvent=function(self,d,...)for h,e in pairs(c[d]or{})do e[1](e[2],...)end end;return true end\nlocal a=DULibrary;function a.getLinks(b,c)local d={}if not b then b={}end;local e=0;for f,g in pairs(unit)do if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false end end;if h then e=e+1;if c then f=e end;d[f]=g end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,g in pairs(d)do if l==m.getElementNameById(g.getLocalId())then return g end end end\n"},{"key":45,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:IndustryHudControl/IndustryHudControl'] = (function (...) ---@class IndustryHudControl\nIndustryHudControl = {}\nIndustryHudControl.__index = IndustryHudControl\n\nlocal INIT_DONE = 'initDone_'\n\n---@param channelPrefix string no underscore\n---@param switch ManualSwitch\n---@param receiverControl Receiver\n---@param industries Industry[]\n---@param unit ControlUnit\n---@param system System\nfunction IndustryHudControl.start(channelPrefix, switch, receiverControl, industries, unit, system)\n    local initDoneChannel = INIT_DONE .. channelPrefix .. '_' .. #industries\n    local controlChannel = channelPrefix .. '_Control'\n\n    ---@overload fun(): void\n    local function complete(errorMessage)\n        if errorMessage then\n            system.print(errorMessage)\n            error(errorMessage)\n        end\n        switch.deactivate()\n        unit.exit()\n    end\n\n    local function initAndValidate()\n        local controlChannels = receiverControl.getChannelList()\n        if controlChannels and #controlChannels == 2 then\n            local lastInitDoneChannel = controlChannels[1]\n\n            if lastInitDoneChannel == initDoneChannel then\n                return\n            end\n        end\n\n        --init not done yet\n        local factoryPrefixPattern = '^' .. channelPrefix .. '_'\n        for _, industry in ipairs(industries) do\n            local name = industry.getName()\n            if not name:find(factoryPrefixPattern) then\n                complete(\"Factory name doesn't start with valid prefix. Name '\" .. name ..\n                        \"', expected prefix '\" .. channelPrefix .. \"_'.\")\n            end\n        end\n\n        local controlChannels = { initDoneChannel, controlChannel }\n        if not receiverControl.setChannelList(controlChannels) == 1 then\n            complete('Failed to setup control channels.')\n        end\n\n        system.print('Config validation done.')\n    end\n\n    ---@type table<string, fun(ind: Industry) | fun(ind: Industry, param: string)>\n    local commands = {\n        --run\n        ['R'] = function(industry)\n            industry.startRun()\n        end,\n        --batch\n        ['B'] = function(industry, batches)\n            industry.batchStart(tonumber(batches))\n        end,\n        --maintain\n        ['M'] = function(industry, quantity)\n            industry.startMaintain(tonumber(quantity))\n        end,\n        ['S'] = function(industry, force)\n            force = force or 'false'\n            industry.stop(force:lower() == \"true\", false)\n        end\n    }\n\n    ---@return string[]\n    local function strSplit(s, delimiter)\n        local result = {};\n        for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n            table.insert(result, match);\n        end\n        return result;\n    end\n\n    ---@type table<number, Industry>\n    local industryIds = {}\n    ---@param channel string\n    ---@param message string command_id_param\n    local function executeCommand(_, channel, message)\n        if channel == controlChannel then\n            local commandParts = strSplit(message, '_')\n            local command = commands[commandParts[1]:upper()]\n            if command then\n                local id = tonumber(commandParts[2])\n                if id then\n                    command(industryIds[id], commandParts[3])\n                end\n            end\n        end\n        complete()\n    end\n\n    local TIMEOUT_TIMER = 'timeout'\n    local function timeoutShutdown(_, timer)\n        if timer == TIMEOUT_TIMER then\n            complete()\n        end\n    end\n\n    initAndValidate()\n\n    for _, industry in ipairs(industries) do\n        industryIds[industry.getLocalId()] = industry\n    end\n\n    receiverControl:onEvent('onReceived', executeCommand)\n    unit:onEvent('onTimer', timeoutShutdown)\n    unit.setTimer(TIMEOUT_TIMER, 1)\nend; end)"},{"key":46,"filter":{"slotKey":-4,"signature":"onActionStart(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionStart\",action)"},{"key":47,"filter":{"slotKey":-4,"signature":"onActionLoop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionLoop\",action)"},{"key":48,"filter":{"slotKey":-4,"signature":"onActionStop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionStop\",action)"},{"key":49,"filter":{"slotKey":-4,"signature":"onUpdate()","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onUpdate\")"},{"key":50,"filter":{"slotKey":-4,"signature":"onFlush()","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onFlush\")"},{"key":51,"filter":{"slotKey":-4,"signature":"onInputText(text)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onInputText\",text)"},{"key":52,"filter":{"slotKey":-4,"signature":"onCameraChanged(mode)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onCameraChanged\",mode)"},{"key":53,"filter":{"slotKey":-3,"signature":"onParentChanged(oldId,newId)","args":[{"variable":"*"},{"variable":"*"}]},"code":"player:triggerEvent(\"onParentChanged\",oldId,newId)"},{"key":54,"filter":{"slotKey":-2,"signature":"onDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onDocked\",id)"},{"key":55,"filter":{"slotKey":-2,"signature":"onUndocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onUndocked\",id)"},{"key":56,"filter":{"slotKey":-2,"signature":"onPlayerBoarded(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onPlayerBoarded\",id)"},{"key":57,"filter":{"slotKey":-2,"signature":"onVRStationEntered(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onVRStationEntered\",id)"},{"key":58,"filter":{"slotKey":-2,"signature":"onConstructDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onConstructDocked\",id)"},{"key":59,"filter":{"slotKey":-2,"signature":"onPvPTimer(active)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onPvPTimer\",active)"},{"key":60,"filter":{"slotKey":-1,"signature":"onStart()","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onStart\")"},{"key":61,"filter":{"slotKey":-1,"signature":"onStop()","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onStop\")"},{"key":62,"filter":{"slotKey":-1,"signature":"onTimer(timerId)","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onTimer\",timerId)"},{"key":63,"filter":{"slotKey":1,"signature":"onReceived(channel,message)","args":[{"variable":"*"},{"variable":"*"}]},"code":"receiverControl:triggerEvent(\"onReceived\",channel,message)"},{"key":64,"filter":{"slotKey":2,"signature":"onStarted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry1:triggerEvent(\"onStarted\",id,quantity)"},{"key":65,"filter":{"slotKey":2,"signature":"onCompleted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry1:triggerEvent(\"onCompleted\",id,quantity)"},{"key":66,"filter":{"slotKey":2,"signature":"onStatusChanged(status)","args":[{"variable":"*"}]},"code":"industry1:triggerEvent(\"onStatusChanged\",status)"},{"key":67,"filter":{"slotKey":2,"signature":"onBankUpdate()","args":[{"variable":"*"}]},"code":"industry1:triggerEvent(\"onBankUpdate\")"},{"key":68,"filter":{"slotKey":3,"signature":"onStarted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry2:triggerEvent(\"onStarted\",id,quantity)"},{"key":69,"filter":{"slotKey":3,"signature":"onCompleted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry2:triggerEvent(\"onCompleted\",id,quantity)"},{"key":70,"filter":{"slotKey":3,"signature":"onStatusChanged(status)","args":[{"variable":"*"}]},"code":"industry2:triggerEvent(\"onStatusChanged\",status)"},{"key":71,"filter":{"slotKey":3,"signature":"onBankUpdate()","args":[{"variable":"*"}]},"code":"industry2:triggerEvent(\"onBankUpdate\")"},{"key":72,"filter":{"slotKey":4,"signature":"onStarted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry3:triggerEvent(\"onStarted\",id,quantity)"},{"key":73,"filter":{"slotKey":4,"signature":"onCompleted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry3:triggerEvent(\"onCompleted\",id,quantity)"},{"key":74,"filter":{"slotKey":4,"signature":"onStatusChanged(status)","args":[{"variable":"*"}]},"code":"industry3:triggerEvent(\"onStatusChanged\",status)"},{"key":75,"filter":{"slotKey":4,"signature":"onBankUpdate()","args":[{"variable":"*"}]},"code":"industry3:triggerEvent(\"onBankUpdate\")"},{"key":76,"filter":{"slotKey":5,"signature":"onStarted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry5:triggerEvent(\"onStarted\",id,quantity)"},{"key":77,"filter":{"slotKey":5,"signature":"onCompleted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry5:triggerEvent(\"onCompleted\",id,quantity)"},{"key":78,"filter":{"slotKey":5,"signature":"onStatusChanged(status)","args":[{"variable":"*"}]},"code":"industry5:triggerEvent(\"onStatusChanged\",status)"},{"key":79,"filter":{"slotKey":5,"signature":"onBankUpdate()","args":[{"variable":"*"}]},"code":"industry5:triggerEvent(\"onBankUpdate\")"},{"key":80,"filter":{"slotKey":6,"signature":"onStarted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry6:triggerEvent(\"onStarted\",id,quantity)"},{"key":81,"filter":{"slotKey":6,"signature":"onCompleted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry6:triggerEvent(\"onCompleted\",id,quantity)"},{"key":82,"filter":{"slotKey":6,"signature":"onStatusChanged(status)","args":[{"variable":"*"}]},"code":"industry6:triggerEvent(\"onStatusChanged\",status)"},{"key":83,"filter":{"slotKey":6,"signature":"onBankUpdate()","args":[{"variable":"*"}]},"code":"industry6:triggerEvent(\"onBankUpdate\")"},{"key":84,"filter":{"slotKey":7,"signature":"onStarted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry7:triggerEvent(\"onStarted\",id,quantity)"},{"key":85,"filter":{"slotKey":7,"signature":"onCompleted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry7:triggerEvent(\"onCompleted\",id,quantity)"},{"key":86,"filter":{"slotKey":7,"signature":"onStatusChanged(status)","args":[{"variable":"*"}]},"code":"industry7:triggerEvent(\"onStatusChanged\",status)"},{"key":87,"filter":{"slotKey":7,"signature":"onBankUpdate()","args":[{"variable":"*"}]},"code":"industry7:triggerEvent(\"onBankUpdate\")"},{"key":88,"filter":{"slotKey":8,"signature":"onStarted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry8:triggerEvent(\"onStarted\",id,quantity)"},{"key":89,"filter":{"slotKey":8,"signature":"onCompleted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"industry8:triggerEvent(\"onCompleted\",id,quantity)"},{"key":90,"filter":{"slotKey":8,"signature":"onStatusChanged(status)","args":[{"variable":"*"}]},"code":"industry8:triggerEvent(\"onStatusChanged\",status)"},{"key":91,"filter":{"slotKey":8,"signature":"onBankUpdate()","args":[{"variable":"*"}]},"code":"industry8:triggerEvent(\"onBankUpdate\")"},{"key":92,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"-- Setup improved event handlers\nif not __EVENTS then\nlibrary.addEventHandlers(library)\nlibrary.addEventHandlers(system)\nlibrary.addEventHandlers(player)\nlibrary.addEventHandlers(construct)\nlibrary.addEventHandlers(unit)\nlibrary.addEventHandlers(receiverControl)\nlibrary.addEventHandlers(industry1)\nlibrary.addEventHandlers(industry2)\nlibrary.addEventHandlers(industry3)\nlibrary.addEventHandlers(industry5)\nlibrary.addEventHandlers(industry6)\nlibrary.addEventHandlers(industry7)\nlibrary.addEventHandlers(industry8)\n__EVENTS=true\nend"},{"key":93,"filter":{"slotKey":-1,"signature":"onStart()","args":[{"variable":"*"}]},"code":"require('du-industry-hud:IndustryHudControl/IndustryHudControl')\n\n---@type string\n\nchannelPrefix=\"changeMe\" --export: no underscore\n\n\n---@type ManualSwitch\nswitch = switch\n---@type Receiver\nreceiverControl = receiverControl\nindustry1, industry2, industry3, industry4, industry5, industry6, industry7, industry8 = industry1, industry2, industry3, industry4, industry5, industry6, industry7, industry8\nlocal industries = --[[---@type Industry[] ]] {industry1, industry2, industry3, industry4, industry5, industry6, industry7, industry8}\n\nIndustryHudControl.start(channelPrefix, switch, receiverControl, industries, unit, system)"}],"methods":[],"events":[]}