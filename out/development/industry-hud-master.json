{"slots":{"0":{"name":"core","type":{"methods":[],"events":[]},"class":"CoreUnit"},"1":{"name":"emitter","type":{"methods":[],"events":[]}},"2":{"name":"slot2","type":{"methods":[],"events":[]}},"3":{"name":"slot3","type":{"methods":[],"events":[]}},"4":{"name":"slot4","type":{"methods":[],"events":[]}},"5":{"name":"slot5","type":{"methods":[],"events":[]}},"6":{"name":"slot6","type":{"methods":[],"events":[]}},"7":{"name":"slot7","type":{"methods":[],"events":[]}},"8":{"name":"slot8","type":{"methods":[],"events":[]}},"9":{"name":"slot9","type":{"methods":[],"events":[]}},"10":{"name":"slot10","type":{"methods":[],"events":[]}},"11":{"name":"slot11","type":{"methods":[],"events":[]}},"12":{"name":"slot12","type":{"methods":[],"events":[]}},"13":{"name":"slot13","type":{"methods":[],"events":[]}},"14":{"name":"slot14","type":{"methods":[],"events":[]}},"15":{"name":"slot15","type":{"methods":[],"events":[]}},"16":{"name":"slot16","type":{"methods":[],"events":[]}},"17":{"name":"slot17","type":{"methods":[],"events":[]}},"18":{"name":"slot18","type":{"methods":[],"events":[]}},"19":{"name":"slot19","type":{"methods":[],"events":[]}},"20":{"name":"slot20","type":{"methods":[],"events":[]}},"-5":{"name":"library","type":{"methods":[],"events":[]}},"-4":{"name":"system","type":{"methods":[],"events":[]}},"-3":{"name":"player","type":{"methods":[],"events":[]}},"-2":{"name":"construct","type":{"methods":[],"events":[]}},"-1":{"name":"unit","type":{"methods":[],"events":[]}}},"handlers":[{"key":0,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"function library.addEventHandlers(a)if not a or a.onEvent and a.triggerEvent then return false end;if'table'~=type(a)then error('You can only add event handlers to table objects!')end;local b=0;local c={}a.onEvent=function(self,d,e,f)if'function'~=type(e)then error('Event handler must be a function!')end;f=f or self;if'table'~=type(f)then error('The value of self must be a table!')end;if not c[d]then c[d]={}end;b=b+1;c[d][b]={e,f}return b end;a.clearEvent=function(self,d,g)if c[d]and c[d][g]then c[d][g]=nil end end;a.triggerEvent=function(self,d,...)for h,e in pairs(c[d]or{})do e[1](e[2],...)end end;return true end\nlocal a=DULibrary;function a.getLinks(b,c)local d={}if not b then b={}end;local e=0;for f,g in pairs(unit)do if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false end end;if h then e=e+1;if c then f=e end;d[f]=g end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,g in pairs(d)do if l==m.getElementNameById(g.getLocalId())then return g end end end\n"},{"key":1,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/utils/du_constants'] = (function (...) ---@class UnitEvents\nUNIT_EVENTS = {}\nUNIT_EVENTS.START = 'onStart'\nUNIT_EVENTS.STOP = 'onStop'\n\n---@class SystemEvents\nSYSTEM_EVENTS = {}\nSYSTEM_EVENTS.ACTION_LOOP = 'onActionLoop'\nSYSTEM_EVENTS.ACTION_START = 'onActionStart'\nSYSTEM_EVENTS.ACTION_STOP = 'onActionStop'\nSYSTEM_EVENTS.INPUT_TEXT = 'onInputText'\nSYSTEM_EVENTS.UPDATE = 'onUpdate'\n\n---@class LuaActions\nLUA_ACTIONS = {}\nLUA_ACTIONS.FORWARD = \"forward\"\nLUA_ACTIONS.BACKWARD = \"backward\"\nLUA_ACTIONS.YAWLEFT = \"yawleft\"\nLUA_ACTIONS.YAWRIGHT = \"yawright\"\nLUA_ACTIONS.STRAFELEFT = \"strafeleft\"\nLUA_ACTIONS.STRAFERIGHT = \"straferight\"\nLUA_ACTIONS.LEFT = \"left\"\nLUA_ACTIONS.RIGHT = \"right\"\nLUA_ACTIONS.UP = \"up\"\nLUA_ACTIONS.DOWN = \"down\"\nLUA_ACTIONS.GROUNDALTITUDEUP = \"groundaltitudeup\"\nLUA_ACTIONS.GROUNDALTITUDEDOWN = \"groundaltitudedown\"\nLUA_ACTIONS.LALT = \"lalt\"\nLUA_ACTIONS.LSHIFT = \"lshift\"\nLUA_ACTIONS.GEAR = \"gear\"\nLUA_ACTIONS.LIGHT = \"light\"\nLUA_ACTIONS.BRAKE = \"brake\"\nLUA_ACTIONS.OPTION1 = \"option1\"\nLUA_ACTIONS.OPTION2 = \"option2\"\nLUA_ACTIONS.OPTION3 = \"option3\"\nLUA_ACTIONS.OPTION4 = \"option4\"\nLUA_ACTIONS.OPTION5 = \"option5\"\nLUA_ACTIONS.OPTION6 = \"option6\"\nLUA_ACTIONS.OPTION7 = \"option7\"\nLUA_ACTIONS.OPTION8 = \"option8\"\nLUA_ACTIONS.OPTION9 = \"option9\"\nLUA_ACTIONS.LEFTMOUSE = \"leftmouse\"\nLUA_ACTIONS.STOPENGINES = \"stopengines\"\nLUA_ACTIONS.SPEEDUP = \"speedup\"\nLUA_ACTIONS.SPEEDDOWN = \"speeddown\"\nLUA_ACTIONS.ANTIGRAVITY = \"antigravity\"\nLUA_ACTIONS.BOOSTER = \"booster\"; end)"},{"key":2,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/utils/duluac'] = (function (...) ---@class DuLuacUtils\nDuLuacUtils = {}\n\n---@param target DuLuacElement\n---@param event string\n---@param handlers table<string, function>\nfunction DuLuacUtils.addListener(target, event, handlers)\n    target:onEvent(event, DuLuacUtils.createHandler(handlers))\nend\n\nfunction DuLuacUtils.createHandler(handlers)\n    return function(_, key)\n        local handler = handlers[key]\n\n        if handler then\n            handler()\n        end\n    end\nend; end)"},{"key":3,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/state_manager/model/Service'] = (function (...) ---@class Service : DuLuacElement\n---@field hasHud boolean\nService = {}\nService.__index = Service\n\n---@return Service\nfunction Service.new()\n    local self = --[[---@type self]] {}\n\n    library.addEventHandlers(self)\n\n    ---@param state State\n    function self.start(state)\n        error('Service.start() method not implemented.')\n    end\n\n    self.hasHud = false\n\n    ---@return string\n    function self.drawHud()\n        error('Service.drawHud() method not implemented.')\n\n        return ''\n    end\n\n    return setmetatable(self, Service)\nend\n; end)"},{"key":4,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/concurrency/CoroutineManager'] = (function (...) ---@class CoroutinePermit\n---@field __index\n---@field workCounter number\nCoroutinePermit = {}\nCoroutinePermit.__index = CoroutinePermit\n\n---@param max number\n---@return CoroutinePermit\nfunction CoroutinePermit.new(max)\n    local self = --[[---@type self]] {}\n\n    self.workCounter = 0\n\n    ---@param permits number\n    ---@overload fun() : void\n    function self.acquire(permits)\n        permits = permits or 1\n\n        if self.workCounter < max then\n            self.workCounter = self.workCounter + 1\n        else\n            self.yield()\n        end\n    end\n\n    function self.yield()\n        _, max = coroutine.yield(self.workCounter)\n        self.workCounter = 0\n    end\n\n    return setmetatable(self, CoroutinePermit)\nend\n\n---@class CoroutineManager\n---@field __index\nCoroutineManager = {}\nCoroutineManager.__index = CoroutineManager\n\n---@param workPerTick number coroutine amount of work done per tick\n---@return CoroutineManager\nfunction CoroutineManager.new(workPerTick)\n    local self = --[[---@type self]] {}\n\n    ---@type thread\n    local masterCoroutine\n    ---@type table<Service, table<string, thread>>\n    local coroutines\n    ---@type number\n    self.activeCoroutines = 0\n\n    function self.poll()\n        if self.activeCoroutines > 0 and coroutine.status(masterCoroutine) == \"suspended\" then\n            local result, msg = coroutine.resume(masterCoroutine)\n            if not result then\n                error('master coroutine failed: ' .. msg)\n            end\n        end\n    end\n\n    ---@param service Service\n    ---@param name string\n    ---@param handler fun(permit: CoroutinePermit): void\n    ---@param repeated boolean\n    ---@overload fun(service: Service, name: string, handler: (fun(permit: CoroutinePermit): void)): void\n    function self.registerCoroutine(service, name, handler, repeated)\n        coroutines = coroutines or {}\n        self.activeCoroutines = self.activeCoroutines + 1\n\n        if not masterCoroutine then\n            masterCoroutine = coroutine.create(function()\n                local tickWorkQuota = workPerTick\n                local tickRoutinesCalled = 0\n                while self.activeCoroutines > 0 do\n                    local cycleActiveCoroutines = 0\n                    for _, routines in pairs(coroutines) do\n                        for routineName, routine in pairs(routines) do\n                            local permit = CoroutinePermit.new(tickWorkQuota)\n\n                            if coroutine.status(routine) == \"suspended\" then\n                                cycleActiveCoroutines = cycleActiveCoroutines + 1\n                                tickRoutinesCalled = tickRoutinesCalled + 1\n                                local result, returned = coroutine.resume(routine, permit, tickWorkQuota)\n                                if result then\n                                    tickWorkQuota = tickWorkQuota - returned\n                                else\n                                    error('coroutine failed \"' .. routineName .. '\": ' .. returned)\n                                end\n\n                                if tickWorkQuota == 0 or tickRoutinesCalled >= self.activeCoroutines then\n                                    coroutine.yield()\n                                    tickWorkQuota = workPerTick\n                                    tickRoutinesCalled = 0\n                                end\n                            end\n                        end\n                    end\n                    self.activeCoroutines = cycleActiveCoroutines\n                end\n            end)\n        end\n\n        local routine = coroutine.create(function(permit)\n            while repeated do\n                handler(permit)\n                permit.yield()\n            end\n            handler(permit)\n\n            return permit.workCounter\n        end)\n\n        local serviceCoroutines = coroutines[service] or {}\n        serviceCoroutines[name] = routine\n        coroutines[service] = serviceCoroutines\n    end\n\n    return setmetatable(self, CoroutineManager)\nend; end)"},{"key":5,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/state_manager/model/State'] = (function (...) ---@class State\nState = {}\nState.__index = State\n\n---@param services Service[]\n---@param unit ControlUnit\n---@param system System\n---@param workPerTick number coroutine amount of work done per tick\n---@param workTickInterval number coroutine interval between two ticks\n---@param onStarts (fun(state: State): void)[]\n---@overload fun(services: Service[], unit: ControlUnit, system: System, workPerTick: number, workInterval: number): State\n---@return State\nfunction State.new(services, unit, system, workPerTick, workTickInterval, onStarts)\n    local self = --[[---@type self]] {}\n\n    onStarts = onStarts or {}\n\n    ---@type fun[]\n    local handlersDeregister = {}\n    ---@type string[]\n    local timers = {}\n\n    local function drawHud()\n        ---@type string[]\n        local hud = {}\n        for _, service in ipairs(services) do\n            if service.hasHud then\n                table.insert(hud, service.drawHud())\n            end\n        end\n\n        if #hud > 0 then\n            local hudString = table.concat(hud)\n\n            if hudString ~= '' then\n                system.setScreen(hudString)\n            end\n        end\n    end\n\n    local coroutineManager = CoroutineManager.new(workPerTick)\n    function self.start()\n        for _, service in ipairs(services) do\n            service.start(self)\n        end\n\n        for _, onStart in ipairs(onStarts) do\n            onStart(self)\n        end\n\n        if coroutineManager.activeCoroutines > 0 then\n            self.registerTimer('State_masterCoroutine', workTickInterval, coroutineManager.poll)\n        end\n\n        system.showScreen(true)\n        self.registerHandler(system, SYSTEM_EVENTS.UPDATE, drawHud)\n    end\n\n    function self.stop()\n        for _, deregister in ipairs(handlersDeregister) do\n            deregister()\n        end\n        handlersDeregister = {}\n\n        for _, timer in ipairs(timers) do\n            unit.stopTimer(timer)\n        end\n        timers = {}\n\n        coroutineManager = CoroutineManager.new(workPerTick)\n    end\n\n    ---@param object DuLuacElement\n    ---@param event string\n    ---@param handler fun\n    function self.registerHandler(object, event, handler)\n        local handlerId = object:onEvent(event, handler)\n        table.insert(handlersDeregister, function()\n            object:clearEvent(event, handlerId)\n        end)\n    end\n\n    ---@param service Service\n    ---@param name string\n    ---@param handler fun(permit: CoroutinePermit): void\n    ---@param repeated boolean\n    ---@overload fun(service: Service, name: string, handler: (fun(permit: CoroutinePermit): void)): void\n    function self.registerCoroutine(service, name, handler, repeated)\n       coroutineManager.registerCoroutine(service, name, handler, repeated)\n    end\n\n    ---@param timer string\n    ---@param interval number\n    ---@param handler fun\n    function self.registerTimer(timer, interval, handler)\n        self.registerHandler(unit, 'onTimer', DuLuacUtils.createHandler({\n            [timer] = handler\n        }))\n\n        unit.setTimer(timer, interval)\n        table.insert(timers, timer)\n    end\n\n    return setmetatable(self, State)\nend\n; end)"},{"key":6,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/requires/service'] = (function (...) require('du-industry-hud:du_lib/utils/du_constants')\nrequire('du-industry-hud:du_lib/utils/duluac')\nrequire('du-industry-hud:du_lib/state_manager/model/Service')\nrequire('du-industry-hud:du_lib/concurrency/CoroutineManager')\nrequire('du-industry-hud:du_lib/state_manager/model/State'); end)"},{"key":7,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/data_hud/FullDataHudData'] = (function (...) ---@class FullDataHudData\n---@field groups string[]\n---@field headers string[]\n---@field rows string[][]\n---@field title string\nFullDataHudData = {}\nFullDataHudData.__index = FullDataHudData\n\n---@param groups string[] | nil\n---@param headers string[]\n---@param rows string[][]\n---@param title string\n---@overload fun(title: string, headers: string[], rows: string[][]) : FullDataHudData\n---@return FullDataHudData\nfunction FullDataHudData.new(title, headers, rows, groups)\n    local self = --[[---@type self]] { }\n\n    self.groups = --[[---@type string[] ]] groups\n    self.headers = headers\n    self.rows = rows\n    self.title = title\n\n    return setmetatable(self, FullDataHudData)\nend; end)"},{"key":8,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/utils/fn_duCurrentDateTime'] = (function (...) return function(utc)\n    local t = system.getUtcTime()\n    if not utc then t = t + system.getUtcOffset() end\n    local DSEC=24*60*60\n    local YSEC=365*DSEC\n    local LSEC=YSEC+DSEC\n    local FSEC=4*YSEC+DSEC\n    local BASE_DOW=4\n    local BASE_YEAR=1970\n    local _days={-1, 30, 58, 89, 119, 150, 180, 211, 242, 272, 303, 333, 364}\n    local _lpdays={}\n    for i=1,2  do _lpdays[i]=_days[i]   end\n    for i=3,13 do _lpdays[i]=_days[i]+1 end\n    local y,j,m,d,w,h,n,s\n    local mdays=_days\n    s=t\n    y=math.floor(s/FSEC)\n    s=s-y*FSEC\n    y=y*4+BASE_YEAR\n    if s>=YSEC then\n        y=y+1\n        s=s-YSEC\n        if s>=YSEC then\n            y=y+1\n            s=s-YSEC\n            if s>=LSEC then\n                y=y+1\n                s=s-LSEC\n            else\n                mdays=_lpdays\n            end\n        end\n    end\n    j=math.floor(s/DSEC)\n    s=s-j*DSEC\n    local m=1\n    while mdays[m]<j do m=m+1 end\n    m=m-1\n    local d=j-mdays[m]\n    w=(math.floor(t/DSEC)+BASE_DOW)%7\n    if w == 0 then w = 7 end\n    h=math.floor(s/3600)\n    s=s-h*3600\n    n=math.floor(s/60)\n    function round(a,b)if b then return utils.round(a/b)*b end;return a>=0 and math.floor(a+0.5)or math.ceil(a-0.5)end\n    s=round(s-n*60)\n    local weekDaysNames = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"}\n    local weekDaysShortNames = {\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"}\n    local monthNames = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"}\n    local monthShortNames = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}\n    return y,m,d,h,n,s,w,weekDaysNames[w],weekDaysShortNames[w],monthNames[m],monthShortNames[m],j+1\nend; end)"},{"key":9,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/data_hud/FullDataHud'] = (function (...) require('du-industry-hud:du_lib/requires/service')\nrequire('du-industry-hud:du_lib/data_hud/FullDataHudData')\nlocal duCurrentDateTime = require('du-industry-hud:du_lib/utils/fn_duCurrentDateTime')\n\n---@class FullDataHudEvents\nFULL_DATA_HUD_EVENTS = {}\n---handler: func(self, groupIndex)\nFULL_DATA_HUD_EVENTS.GROUP_SELECTED = 'onGroupSelected'\n---handler: func(self, detailIndex)\nFULL_DATA_HUD_EVENTS.DETAIL_SELECTED = 'onDetailSelected'\n---handler: func(self, groupIndex, detailIndex)\nFULL_DATA_HUD_EVENTS.DETAIL_ACTION_RIGHT = 'onDetailActionRight'\n---handler: func(self, groupIndex, detailIndex)\nFULL_DATA_HUD_EVENTS.DETAIL_ACTION_LEFT = 'onDetailActionLeft'\n---handler: func(self, groupIndex, detailIndex)\nFULL_DATA_HUD_EVENTS.DETAIL_ACTION_DOWN = 'onDetailActionDown'\n---handler: func(self, groupIndex, detailIndex)\nFULL_DATA_HUD_EVENTS.DETAIL_ACTION_UP = 'onDetailActionUp'\n---handler: func(self, groupIndex)\nFULL_DATA_HUD_EVENTS.GROUP_ACTION_RIGHT = 'onGroupActionRight'\n---handler: func(self, groupIndex)\nFULL_DATA_HUD_EVENTS.GROUP_ACTION_LEFT = 'onGroupActionLeft'\n\n---@class FullDataHud : Service\nFullDataHud = {}\nFullDataHud.__index = FullDataHud\n\nlocal function getHudHelpHtml(title)\n    local year, month, day, hour, minute, second, _, _, _, _, _, _ = duCurrentDateTime(nil)\n    local dateStr = string.format(\"%02d/%02d/%04d %02d:%02d:%02d\", day, month, year, hour, minute, second)\n    return table.concat({[[<div class=\"hud_help_commands hud_container\">\n    <table>\n        <tr><th>]], title, [[</th></tr>\n        <tr>\n            <th colspan=\"2\">\n                ]], dateStr, [[\n            </th>\n        </tr>\n        <tr>\n            <td>Show/Hide HUD</td>\n            <th style=\"text-align:right;\">Alt+2</th>\n        </tr>\n    </table>\n</div>]]})\nend\n\nlocal function getHudMainCss(contentFontSize, hideGroups)\n    local detailsContainerOffset = 20\n    if hideGroups then\n        detailsContainerOffset = 1\n    end\n    return table.concat({[[\n    <style>\n\t   * {\n\t\t  font-size: ]], tostring(contentFontSize), [[px;\n\t   }\n        .hud_container {\n            border: 2px solid orange;\n            border-radius:10px;\n            background-color: rgba(0,0,0,.75);\n            padding:10px;\n        }\n        .hud_help_commands {\n            position: absolute;\n            top: 1vh;\n            left: 1vw;\n            text-transform: uppercase;\n            font-weight: bold;\n        }\n        .hud_list_container {\n            position: absolute;\n            top: 17vh;\n            left: 1vw;\n            text-transform: uppercase;\n            font-weight: bold;\n        }\n        .hud_machines_container {\n            position: absolute;\n            top: 17vh;\n            left: ]], tostring(detailsContainerOffset), [[vw;\n        }\n        .elementType {\n            margin-top:10px;\n            border-radius:5px;\n        }\n        .elementType.selected {\n            border: 2px solid green;\n            background-color: rgba(0,200,0,.45);\n        }\n        tr.selected td, tr.selected th{\n            border: 2px solid green;\n            background-color: rgba(0,200,0,.1);\n        }\n        td, th {\n            border-bottom:1px solid white;\n            padding:5px;\n            text-align: center;\n        }\n        th {\n            font-weight: bold;\n        }\n        .text-success{color: #28a745;}\n        .text-danger{color:#dc3545;}\n        .text-warning{color:#ffc107;}\n        .text-info{color:#17a2b8;}\n        .text-primary{color:#007bff;}\n        .text-orangered{color:orangered;}\n        .bg-success{background-color: #28a745;}\n        .bg-danger{background-color:#dc3545;}\n        .bg-warning{background-color:#ffc107;}\n        .bg-info{background-color:#17a2b8;}\n        .bg-primary{background-color:#007bff;}\n    </style>\n]]})\nend\n\nlocal function getHudLoadingHtml()\n    return [[\n            <div class=\"hud_list_container hud_container\">\n            \t<table style=\"width:100%\">\n            \t\t<tr>\n            \t\t\t<th>LOADING...</th>\n            \t\t</tr>\n            \t</table>\n            </div>\n        ]]\nend\n\n---@return number\nlocal function minOnPage(page, pageSize)\n    return ((page - 1) * pageSize) + 1\nend\n\nlocal function maxOnPage(page, pageSize, lastItem)\n    return math.min(page * pageSize, lastItem)\nend\n\n---@param groups string[]\nlocal function renderGroupsHtml(groups, selectedGroupIndex, groupsByPage)\n    ---@type string[]\n    local groupsHtml = { [[<div class=\"hud_list_container hud_container\">\n                <div style=\"text-align:center;font-weight:bold;border-bottom:1px solid white;\">&#x2191; &nbsp;&nbsp; Ctrl+Arrow Up</div>\n            ]]}\n\n    local page = math.floor((selectedGroupIndex - 1) / groupsByPage) + 1\n    local minOnPage = minOnPage(page, groupsByPage)\n    local maxOnPage = maxOnPage(page, groupsByPage, #groups)\n\n    for i = minOnPage, maxOnPage do\n        local group = groups[i]\n        table.insert(groupsHtml, '<div class=\"elementType')\n        if i == selectedGroupIndex then\n            table.insert(groupsHtml, \" selected\")\n        end\n\n        table.insert(groupsHtml, [[\">\n                    <table style=\"width:100%;\">\n                        <tr>\n                            <th style=\"text-align:left;border-bottom:none;\">]])\n        table.insert(groupsHtml, group)\n        table.insert(groupsHtml, [[</th>\n                        </tr>\n                    </table>\n                </div>\n                ]])\n    end\n\n    table.insert(groupsHtml, [[<div style=\"margin-top:10px;text-align:center;font-weight:bold;border-top:1px solid white;\">&#x2193; &nbsp;&nbsp; Ctrl+Arrow Down</div></div>]])\n\n    return table.concat(groupsHtml)\nend\n\n---@param system System\n---@param contentFontSize number\n---@param elementsByPage number\n---@param groupsByPage number\n---@overload fun(system: System, contentFontSize: number, elementsByPage: number) : FullDataHud\n---@return FullDataHud\nfunction FullDataHud.new(system, contentFontSize, elementsByPage, groupsByPage)\n    local self = --[[---@type self]] Service.new()\n\n    local hudMainCss = getHudMainCss(contentFontSize, not groupsByPage)\n    local hudMinimalHtml = hudMainCss .. getHudHelpHtml('Hud Loading')\n    local hudLoadingHtml = hudMinimalHtml .. getHudLoadingHtml()\n\n    ---@type FullDataHudData\n    local data\n\n    local hudDisplayed = true\n    local selectedGroupIndex = 1\n    local selectedDetailIndex = 1\n    local page = 1\n    local maxPage = 1\n\n    local controlPressed = false\n    local altPressed = false\n\n    ---@param newData FullDataHudData\n    function self.updateData(newData)\n        data = newData\n        if data.rows then\n            maxPage = math.ceil(#data.rows / elementsByPage)\n        end\n    end\n\n    function self.setSelected(groupIndex, detailIndex)\n        selectedGroupIndex = groupIndex\n        selectedDetailIndex = detailIndex\n\n        page = math.floor((selectedDetailIndex - 1) / elementsByPage) + 1\n\n        self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectedGroupIndex)\n        self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n    end\n\n    local hudHtml = ''\n    local function updateHud()\n        local data = data\n\n        if data and data.title then\n            hudMinimalHtml = hudMainCss .. getHudHelpHtml(data.title)\n        end\n\n        if not hudDisplayed then\n            hudHtml = hudMinimalHtml\n            return\n        elseif not data then\n            hudHtml = hudLoadingHtml\n            return\n        end\n\n        local groupsHtml = ''\n        if groupsByPage and data.groups then\n            groupsHtml = renderGroupsHtml(data.groups, selectedGroupIndex, groupsByPage)\n        end\n\n        if not data.rows then\n            if data.groups then\n                hudHtml = hudMinimalHtml .. groupsHtml\n            else\n                hudHtml = hudLoadingHtml .. groupsHtml\n            end\n            return\n        end\n\n        local minOnPage = minOnPage(page, elementsByPage)\n        local maxOnPage = maxOnPage(page, elementsByPage, #data.rows)\n\n        ---@type (string | number)[]\n        local detailsHtml = {[[<div class=\"hud_machines_container hud_container\">\n                <div style=\"text-align:center;font-weight:bold;border-bottom:1px solid white;\">&#x2191; &nbsp;&nbsp; Arrow Up</div>\n                <table class=\"elements_table\" style=\"width:100%\">\n                    <tr>\n                        <th>&#x2190; &nbsp;&nbsp; Arrow Left</th>\n                        <th> Page ]], page, [[/]], maxPage, [[ (from ]], minOnPage, [[ to ]], maxOnPage, [[)</th>\n                        <th>Arrow Right &nbsp;&nbsp; &#x2192;</th>\n                    </tr>\n                </table>\n                <table class=\"elements_table\" style=\"width:100%;\">\n                    <tr>]]}\n\n        for _, header in ipairs(data.headers) do\n            table.insert(detailsHtml, '<th>')\n            table.insert(detailsHtml, header)\n            table.insert(detailsHtml, '</th>')\n        end\n        table.insert(detailsHtml, '</tr>')\n\n        for i = minOnPage, maxOnPage do\n            local row = data.rows[i]\n\n            table.insert(detailsHtml, [[<tr]])\n            if selectedDetailIndex == i then\n                table.insert(detailsHtml, [[ class=\"selected\"]])\n            end\n            table.insert(detailsHtml, '>')\n\n            for _, value in ipairs(row) do\n                table.insert(detailsHtml, [[<th>]])\n                table.insert(detailsHtml, value)\n                table.insert(detailsHtml, '</th>')\n            end\n            table.insert(detailsHtml, '</tr>')\n        end\n\n        table.insert(detailsHtml, [[</table>\n            <table class=\"elements_table\" style=\"width:100%\">\n                <tr>\n                    <th>&#x2190; &nbsp;&nbsp; Arrow Left</th>\n                    <th> Page ]])\n        table.insert(detailsHtml, page)\n        table.insert(detailsHtml, '/')\n        table.insert(detailsHtml, maxPage)\n        table.insert(detailsHtml, ' (from ')\n        table.insert(detailsHtml, minOnPage)\n        table.insert(detailsHtml, ' to ')\n        table.insert(detailsHtml, maxOnPage)\n        table.insert(detailsHtml, [[)</th>\n                    <th>Arrow Right &nbsp;&nbsp; &#x2192;</th>\n                </tr>\n            </table>\n            <div style=\"text-align:center;font-weight:bold;border-top:1px solid white;\">&#x2193; &nbsp;&nbsp; Arrow Down</div>\n            </div>]])\n\n        hudHtml = hudMinimalHtml .. groupsHtml .. table.concat(detailsHtml)\n    end\n\n    local function onStartBrake()\n        controlPressed = true\n    end\n\n    local function onStopBrake()\n        controlPressed = false\n    end\n\n    local function onStartAlt()\n        altPressed = true\n    end\n\n    local function onStopAlt()\n        altPressed = false\n    end\n\n    local function onStartDown()\n        if not hudDisplayed then\n            return\n        end\n        local data = data\n        if data.groups and controlPressed == true then\n            if selectedGroupIndex < #data.groups then\n                selectedGroupIndex = selectedGroupIndex + 1\n                selectedDetailIndex = 1\n                page = 1\n\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectedGroupIndex)\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n            end\n        elseif data.rows then\n            if altPressed then\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_ACTION_DOWN, selectedGroupIndex, selectedDetailIndex)\n            elseif selectedDetailIndex < maxOnPage(page, elementsByPage, #data.rows) then\n                selectedDetailIndex = selectedDetailIndex + 1\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n            elseif page < maxPage then\n                page = page + 1\n                selectedDetailIndex = minOnPage(page, elementsByPage)\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n            end\n        end\n    end\n\n    local function onStartUp()\n        if not hudDisplayed then\n            return\n        end\n        local data = data\n        if data.groups and controlPressed then\n            if selectedGroupIndex > 1 then\n                selectedGroupIndex = selectedGroupIndex - 1\n                selectedDetailIndex = 1\n                page = 1\n\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectedGroupIndex)\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n            end\n        elseif data.rows then\n            if altPressed then\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_ACTION_UP, selectedGroupIndex, selectedDetailIndex)\n            elseif selectedDetailIndex > minOnPage(page, elementsByPage) then\n                selectedDetailIndex = selectedDetailIndex - 1\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n            elseif page > 1 then\n                page = page - 1\n                selectedDetailIndex = maxOnPage(page, elementsByPage, #data.rows)\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n            end\n        end\n    end\n\n    local function onStartStrafeLeft()\n        if not hudDisplayed then\n            return\n        end\n        if altPressed then\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_ACTION_LEFT, selectedGroupIndex, selectedDetailIndex)\n        elseif controlPressed then\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_ACTION_LEFT, selectedGroupIndex)\n        elseif page > 1 then\n            page = page - 1\n            selectedDetailIndex = minOnPage(page, elementsByPage)\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n        end\n    end\n\n    local function onStartStrafeRight()\n        if not hudDisplayed then\n            return\n        end\n        if altPressed then\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_ACTION_RIGHT, selectedGroupIndex, selectedDetailIndex)\n        elseif controlPressed then\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_ACTION_RIGHT, selectedGroupIndex)\n        elseif page < maxPage then\n            page = page + 1\n            selectedDetailIndex = minOnPage(page, elementsByPage)\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n        end\n    end\n\n    local function onStartOption2()\n        hudDisplayed = not hudDisplayed\n    end\n\n    self.hasHud = true\n    ---@return string\n    function self.drawHud()\n        return hudHtml\n    end\n\n    ---@param state State\n    function self.start(state)\n        state.registerTimer('FullDataHud_updateUi', 0.1, updateHud)\n        state.registerHandler(system, SYSTEM_EVENTS.ACTION_STOP, DuLuacUtils.createHandler({\n            [LUA_ACTIONS.BRAKE] = onStopBrake,\n            [LUA_ACTIONS.LALT] = onStopAlt,\n        }))\n        state.registerHandler(system, SYSTEM_EVENTS.ACTION_START, DuLuacUtils.createHandler({\n            [LUA_ACTIONS.BRAKE] = onStartBrake,\n            [LUA_ACTIONS.LALT] = onStartAlt,\n            [LUA_ACTIONS.DOWN] = onStartDown,\n            [LUA_ACTIONS.UP] = onStartUp,\n            [LUA_ACTIONS.OPTION2] = onStartOption2,\n            [LUA_ACTIONS.STRAFELEFT] = onStartStrafeLeft,\n            [LUA_ACTIONS.STRAFERIGHT] = onStartStrafeRight,\n        }))\n\n        self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectedGroupIndex)\n        self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n    end\n\n    return setmetatable(self, FullDataHud)\nend; end)"},{"key":10,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/requires/dataHud'] = (function (...) require('du-industry-hud:du_lib/requires/service')\nrequire('du-industry-hud:du_lib/data_hud/FullDataHudData')\nrequire('du-industry-hud:du_lib/data_hud/FullDataHud'); end)"},{"key":11,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/markers/MarkerManager'] = (function (...) require('du-industry-hud:du_lib/requires/service')\n\n---@class MarkerManager : Service\nMarkerManager = {}\nMarkerManager.__index = MarkerManager\n\n---@param core CoreUnit\n---@param unit ControlUnit\n---@return MarkerManager\nfunction MarkerManager.new(core, unit)\n    local self = --[[---@type self]] Service.new()\n\n    ---key is element id, values are sticker ids for element if already spawned\n    ---@type table<number, number[]>\n    local elementMarkers = {}\n    ---@type table<string, number>\n    local elementMarkersNicknames = {}\n\n    ---@param name string\n    function self.removeElementMarker(name)\n        local id = elementMarkersNicknames[name]\n        local markers = elementMarkers[id]\n\n        elementMarkersNicknames[name] = nil\n        elementMarkers[id] = nil\n\n        if markers then\n            for _, marker in ipairs(markers) do\n                core.deleteSticker(marker)\n            end\n        end\n    end\n\n    ---@param name string nickname\n    ---@param id number\n    function self.setElementMarker(name, id)\n        local oldId = elementMarkersNicknames[name]\n\n        if oldId then\n            self.removeElementMarker(name)\n        end\n\n        ---@type number[]\n        local markers = {}\n        local position = vec3(core.getElementPositionById(id))\n        local x = position.x\n        local y = position.y\n        local z = position.z\n        local offset15 = 1.5\n\n        table.insert(markers, core.spawnArrowSticker(x, y, z, \"down\"))\n        table.insert(markers, core.spawnArrowSticker(x, y, z, \"down\"))\n        core.rotateSticker(markers[2],0,0,90)\n        table.insert(markers, core.spawnArrowSticker(x, y, z + offset15, \"north\"))\n        table.insert(markers, core.spawnArrowSticker(x, y, z + offset15, \"north\"))\n        core.rotateSticker(markers[4],90,90,0)\n        table.insert(markers, core.spawnArrowSticker(x, y, z + offset15, \"south\"))\n        table.insert(markers, core.spawnArrowSticker(x, y, z + offset15, \"south\"))\n        core.rotateSticker(markers[6],90,-90,0)\n        table.insert(markers, core.spawnArrowSticker(x, y, z + offset15, \"east\"))\n        table.insert(markers, core.spawnArrowSticker(x, y, z + offset15, \"east\"))\n        core.rotateSticker(markers[8],90,0,90)\n        table.insert(markers, core.spawnArrowSticker(x, y, z + offset15, \"west\"))\n        table.insert(markers, core.spawnArrowSticker(x, y, z + offset15, \"west\"))\n        core.rotateSticker(markers[10],-90,0,90)\n\n        elementMarkers[id] = markers\n        elementMarkersNicknames[name] = id\n    end\n\n    local function refreshMarkers()\n        local offset1 = 1\n        local offset15 = 1.5\n        local offset2 = 2\n        local offset25 = 2.5\n        local offsetFromCenter = 1.5\n\n        for id, markers in pairs(elementMarkers) do\n            local position = vec3(core.getElementPositionById(id))\n            local x = position.x\n            local y = position.y\n            local z = position.z\n\n            core.moveSticker(markers[1], x, y, z + offset25 + offsetFromCenter + 2)\n            core.moveSticker(markers[2], x, y, z + offset25 + offsetFromCenter + 2)\n            core.moveSticker(markers[3], x + offset1 + offsetFromCenter, y, z + offset15)\n            core.moveSticker(markers[4], x + offset1 + offsetFromCenter, y, z + offset15)\n            core.moveSticker(markers[5], x - offset1 - offsetFromCenter, y, z + offset15)\n            core.moveSticker(markers[6], x - offset1 - offsetFromCenter, y, z + offset15)\n            core.moveSticker(markers[7], x, y - offset2 - offsetFromCenter, z + offset15)\n            core.moveSticker(markers[8], x, y - offset2 - offsetFromCenter, z + offset15)\n            core.moveSticker(markers[9], x, y + offset2 + offsetFromCenter, z + offset15)\n            core.moveSticker(markers[10], x, y + offset2 + offsetFromCenter, z + offset15)\n        end\n    end\n\n    local function removeAllMarkers()\n        for name, _ in pairs(elementMarkersNicknames) do\n            self.removeElementMarker(name)\n        end\n    end\n\n    ---@param state State\n    function self.start(state)\n        state.registerTimer('MarkerManager_refresh', 1, refreshMarkers)\n        state.registerHandler(unit, UNIT_EVENTS.STOP, removeAllMarkers)\n    end\n\n    return setmetatable(self, MarkerManager)\nend; end)"},{"key":12,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/data/raw/ItemGroupsRaw'] = (function (...) return --[[---@type table<string, ItemGroup>]] {Consumables={groups={Ammunition={groups={[\"Cannon Ammo\"]={groups={[\"Cannon Ammo XS\"]={groups={[\"Kinetic Ammo\"]={items={3238320397,1980351716,3818049598,2680492642,2746947552}},[\"Thermic Ammo\"]={items={147467923,3607061517,726551231,370579567,2917884317}}}},[\"Cannon S Ammo\"]={groups={[\"Thermic Ammo\"]={items={3253142563,1912399735,2014631386,1081563239,846420746}},[\"Kinetic Ammo\"]={items={52497197,2013297395,1256032552,864736227,2048035010}}}},[\"Medium Cannon Ammo\"]={groups={[\"Kinetic Ammo\"]={items={3802426170,1837088359,1087392944,3901365200,2318901128}},[\"Thermic Ammo\"]={items={2886559338,1627746607,1445049256,3352702648,1958427908}}}},[\"Large Cannon Ammo\"]={groups={[\"Kinetic Ammo\"]={items={2564171448,3111934432,1368644517,2754186867,234876889}},[\"Thermic Ammo\"]={items={2150864517,3705351908,3564640746,99109453,2793941079}}}}}},[\"Railgun Ammo\"]={groups={[\"Railgun Ammo M\"]={groups={[\"Antimatter Ammo\"]={items={3025930763,2753235550,1378313789,2519489329,1129867076}},[\"Electromagnetic Ammo\"]={items={3778585474,1314738719,711588165,2547387530,2401068335}}}},[\"Railgun L Ammo\"]={groups={[\"Antimatter Ammo\"]={items={2009039852,1377917611,994404082,1555786609,4091052814}},[\"Electromagnetic Ammo\"]={items={3711223735,2997406270,985599166,493646316,19332250}}}},[\"Railgun Ammo XS\"]={groups={[\"Antimatter Ammo\"]={items={2975180925,1685710165,3669030673,2562077926,2897347844}},[\"Electromagnetic Ammo\"]={items={1190298485,2661753045,4121476880,671997275,2513950249}}}},[\"Railgun S Ammo\"]={groups={[\"Electromagnetic Ammo\"]={items={2890607046,3511898141,3384068103,1818470694,2277755297}},[\"Antimatter Ammo\"]={items={2423442023,2665059784,2765153031,2454971316,2944291964}}}}}},[\"Laser Ammo\"]={groups={[\"Laser S Ammo\"]={groups={[\"Thermic Ammo\"]={items={3820970963,1363871248,1750052574,1933474332,3423590348}},[\"Electromagnetic Ammo\"]={items={4088065384,2667876309,1921694649,1929049234,3098134459}}}},[\"Laser Ammo XS\"]={groups={[\"Thermic Ammo\"]={items={839159661,2678465305,4135531540,1765328811,570530668}},[\"Electromagnetic Ammo\"]={items={3539993652,3637130597,552630719,902792933,1067471403}}}},[\"Laser Ammo M\"]={groups={[\"Thermic Ammo\"]={items={984810201,1230483435,3708417017,2843836124,212874547}},[\"Electromagnetic Ammo\"]={items={1610308198,483699778,220854647,1693315392,2948970732}}}},[\"Laser Ammo L\"]={groups={[\"Thermic Ammo\"]={items={2619099776,154196902,1068250257,36119774,518572846}},[\"Electromagnetic Ammo\"]={items={1664787227,2281477958,2006239134,2465107224,2170035253}}}}}},[\"Missile Pod Ammo\"]={groups={[\"Missile Ammo XS\"]={groups={[\"Kinetic Ammo\"]={items={2148925933,2392386214,3939368391,2591026571,1503181393}},[\"Antimatter Ammo\"]={items={2340151566,2845912456,2059964042,1154972320,2239958675}}}},[\"Missile S Ammo\"]={groups={[\"Kinetic Ammo\"]={items={2679053199,2116379443,1256805327,578039658,108337911}},[\"Antimatter Ammo\"]={items={1284945646,1333805710,2425505244,116711443,2982583326}}}},[\"Missile M Ammo\"]={groups={[\"Kinetic Ammo\"]={items={1491281175,1209270788,397326901,871384738,3718373809}},[\"Antimatter Ammo\"]={items={326385703,403006216,144252385,3987182986,291497016}}}},[\"Missile Ammo L\"]={groups={[\"Kinetic Ammo\"]={items={1186613579,3073125595,2529340738,897887498,934893004}},[\"Antimatter Ammo\"]={items={3164761417,3376140874,579968086,995805029,3594012056}}}}}}}},Fireworks={groups={[\"Shower shaped Fireworks\"]={},[\"Ring-shaped Fireworks\"]={},[\"Palm tree-shaped Fireworks\"]={},[\"Ball-shaped Fireworks\"]={}}},[\"Warp Cell\"]={items={1339253011}},[\"Relic Plasmas\"]={items={1831558339,1831557945,1831558340,1831558337,1831558338,1831558336,1831558342,1831558343,1831558341,1769135512}},Scraps={groups={DeprecatedScrap={},[\"Basic Scraps\"]={items={2558961706,2417840347,4063983201,3857279161}},[\"Exotic Scraps\"]={items={1182663952,2165650011,3307634000,877202037}},[\"Uncommon Scraps\"]={items={409040753,1831205658,1251531294,3630798120}},[\"Rare Scraps\"]={items={3150580281,1370993297,270611770,1032380176}},[\"Advanced Scraps\"]={items={2115439708,1423148560,409671366,3814734889}}}}}},Elements={groups={[\"Construct Elements\"]={groups={Other={groups={[\"Gravity changers\"]={},[\"Conveyor belts\"]={},Factories={},[\"Market Pods\"]={},[\"Electricity providers\"]={},Markets={},Speakers={},Radars={},[\"Decorative Territory Unit\"]={}}},[\"Combat & Defense Elements\"]={groups={[\"Weapon Unit\"]={groups={Cannons={groups={[\"Cannons L\"]={items={418164307,845167470,3152865678,3289044684,845167469,3960316608,3960316615,418164306,3152865672,418164308,3960316609,845167468,3152865673}},[\"Cannons S\"]={items={1073121333,2058706004,1073121335,1901919706,3567179842,429894438,2058706007,3567179845,3567179843,2058706005,1073121334,429894436,429894437}},[\"Cannons XS\"]={items={3455226644,3467785559,3384934783,3455226647,3384934780,3384934781,3467785553,684853151,684853120,3741742452,3467785552,684853150,3455226645}},[\"Cannons M\"]={items={2672575278,2188788021,2457342402,2457342403,2457342404,2188788022,2188788020,2383624966,2383624965,2672575279,2672575276,1699425404,2383624964}}}},[\"Missile Pods\"]={groups={[\"Missiles M\"]={items={1217643701,1557865377,598736203,1068910656,1217644363,1217643700,1102564707,1102564708,1068910670,598736197,598736196,1068910671,1102564706}},[\"Missiles L\"]={items={3650288368,3650288374,708864066,1205879483,1205879482,708864069,3453451050,3453451051,3453451048,3650288369,1205879485,3873532190,708864067}},[\"Missiles S\"]={items={136359050,1109891544,136359051,2668363433,1843877005,136359048,1843877006,2668363432,1100091708,1100091709,2668363439,1843877007,1100091711}},[\"Missiles XS\"]={items={2239993844,3611570508,1780076561,2239993845,1260582276,1780076560,3611570509,134390789,134390788,134390791,1780076562,2239993846,3611570511}}}},Railguns={groups={[\"Railguns S\"]={items={2991505111,831043071,1767704161,2991505105,831043070,831043069,2991505104,223437807,223437800,1767704174,853107412,1767704175,223437801}},[\"Railguns L \"]={items={2916726762,30018129,2916726760,30018135,3670363953,3670363955,4062760163,4062760160,430145504,3670363952,4062760162,2916726763,30018128}},[\"Railguns XS\"]={items={690643397,549955075,2108818540,1816732409,690643419,1816732415,1816732408,2108818543,549955101,549955100,31327772,690643396,2108818541}},[\"Railguns M\"]={items={111253024,3396072211,1641776328,3396072236,111253039,111253038,1641776330,3396072237,3057550301,3057550300,2733257194,1641776331,3057550275}}}},Gun={},Lasers={groups={[\"Lasers M\"]={items={360504284,3840109426,3840109425,3840109424,3588765877,3588765876,3805044394,3805044393,360504286,360504287,1117413121,3588766026,3805044395}},[\"Lasers XS\"]={items={3698237862,796456749,3698237865,1604660448,11309408,1604660449,3698237863,796456747,796456746,3972697534,3972697533,1604660455,3972697532}},[\"Lasers S\"]={items={338218847,3730148334,338218840,32593579,3730148320,3730148335,338218841,1737118475,1737118473,4124398199,4124398192,4124398193,1737118474}},[\"Lasers L\"]={items={3991674464,679378437,3516228574,679378436,2356629410,679378438,2356629409,2356629408,4270062441,3991674479,3991674478,4270062440,4270062446}}}}}},[\"Shield Generators\"]={groups={[\"Base Shield Generator\"]={items={1430252067}},[\"Capacitor Shield Generators\"]={items={2533776367,2098965040,2846330267,2602781071,2037602890,3840257886,1478631104,311842630}},[\"Variable Shield Generators\"]={items={2209766327,1486568571,3343633564,3864567612,3052136397,4081549548,1401343832,2343432065}},[\"Venter Shield Generators\"]={items={1514631881,1747277189,1735485600,4128180027,4078736566,2842824007,484538921,982995683}},[\"Advanced Shield Generators\"]={items={2034818941,2882830295,254923774,3696387320}}}},Radar={groups={[\"Atmospheric Radar\"]={items={4213791403,3094514782,612626034}},[\"Space Radars\"]={groups={[\"Space Radars S\"]={items={838245688,809783310,809783311,838245690,4118496992,2375197137,2375197136,2375197139,809783408,838245691}},[\"Space Radars M\"]={items={2608116213,3060580944,1707018148,3831485995,2608116214,2608116212,3060580945,3060580950,1707018154,1707018149}},[\"Space Radars L\"]={items={3612800224,2075264591,2075264944,3250064334,3612800254,3612800255,3250064333,2075264590,2802863920,3250064332}}}}}}},items={774130122}},[\"Transportation Elements\"]={groups={Engines={groups={[\"Atmospheric Brakes\"]={groups={[\"Space Brakes\"]={items={3243532126,1452351552,3039211660}},Airbrakes={items={104971834,2198271703,65048663}}}},Engines={groups={[\"Rocket Engines\"]={items={3623903713,359938916,2112772336}},[\"Space Engines\"]={groups={[\"Small Space Engines\"]={items={270403386,2510194717,2682344779,1624640879,2090364569,270403387,2682344778,2510194716,529520576,1171610140,1326357437,1624640872,3764949976}},[\"Medium Space Engines\"]={items={99470466,1757019468,3024541675,2489350112,37629189,85796763,1326315525,1326315524,37629188,3897078752,1757019469,516669711,516669710}},[\"Large Space Engines\"]={items={2809629801,273900142,2809629798,2495558023,892904533,2637003463,613453124}},[\"Space Engines XS\"]={items={2243775376,2368501172,3719125853,175947629,3083225012,1754053133,1754053134,2368501171,175947630,16482091,1971700279,1213509759,3719125852}},[\"Space Engines XL\"]={items={1773467598,3846850308,130796680,1773467599,934426297,2200254788,3478227881,934426296,701947611,1237158531,2497069959,2497069958,3478227882}}},items={2379018394,3432389655,2379018393,516669708,2497069976,3719125843,270403388,3432389652,4025377658,4025377657,2809629799}},[\"Atmospheric Engines\"]={groups={[\"Small Atmospheric Engines\"]={items={2043566501,1301142497,3689697821,385121459,1503780712,385121456,1679964557,317861818,1152783535,3689697794,1152783520,2203746213,1301142496,1152783534}},[\"Atmospheric Engines XS\"]={items={3174850377,3612851272,887167900,710193240,4201522392,676012472,3612851279,4201522399,2472120803,2711764151,1933133404,2711763785,2711764150,2472120802}},[\"Large Atmospheric Engines\"]={items={1638517115,3475626911,2375915630,2510112556,1397818123,3211645332,3211645339,2559369183,1638517112,1397818124,1053170502,1638517113,2559369176,2714399324}},[\"Medium Atmospheric Engines\"]={items={488092471,488092468,488092470,260237137,2370891600,230429858,4072611011,3847351355,2370891601,3295665550,3377917824,3377917825,790956382,790956353}}}},Adjustors={items={47474508,2818864930,3790013467,2648523849}},[\"Ground Engines\"]={groups={[\"Hovercraft Engines\"]={items={650556760,2776777596,2333052331,1105322870,3919255966,2494203891,1468805961,2991279664}},[\"Vertical Boosters\"]={items={3775402879,2216363013,913372512,3556600005}}}}}},Airfoil={groups={Aileron={items={1923840124,2334843027,4017253256,1856288931,2737703104,2292270972}},Wing={items={2532454166,4179758576,404188468,1727614690}},Stabilizer={items={1455311973,3474622996,1090402453,1234961120}}}}}},[\"High-Tech Transportation\"]={groups={[\"Anti-Gravity Pulsor\"]={items={966816758}},[\"Anti-Gravity Generator\"]={items={233079829,3997343699,294414265}},[\"Warp Drive Units\"]={items={2643443936}},[\"Warp Beacon Units\"]={items={2468029849}}}},[\"Support Tech\"]={groups={[\"Landing Gears\"]={items={4078067869,1899560165,2667697870,1884031929}},Gyroscopes={items={2585415184}}}}}},[\"Industry & infrastructure Elements\"]={groups={Industry={groups={[\"Exotic Industry\"]={items={4024529716}},[\"Rare Industry\"]={items={2808015396,648743081,1762226674,3026799989,1762227889,2200747730,2793358076,584577123,2861848556,1762226233,1132446358,2480866766,3264314284,2480928544}},[\"Deprecated industry\"]={},[\"Mining Units\"]={items={3519691962,1949562989,3204140760,3204140766,3204140761,3204140764,3204140767}},[\"Uncommon Industry\"]={items={2793358078,2480866760,2200747728,648743083,2480928550,3264314258,2808015394,3026799987,2861848558,1762227855,584577125,1762226235,1762226636,1132446360}},[\"Advanced Industry\"]={items={648743080,2480866767,2808015397,3026799988,1762226675,1762226232,2200747731,2861848557,2480928551,2793358079,584577124,1762227888,3264314259,1132446361}},[\"Basic Industry\"]={items={2022563937,3857150880,983225811,1215026169,1762226876,3914155468,1762226819,2556123438,3701755071,983225808,2702446443,2681009434,409410678,983225818}}},items={4139262245,63667997}},Containers={groups={Dispensers={items={16651125,333062081}},[\"Ammo Container\"]={items={2300179701,923167511,50309297,300986010}},[\"Fuel Tanks\"]={groups={[\"Rocket Fuel Containers\"]={items={2477859329,3126840739,4180073139,1663412227}},[\"Space Fuel Containers\"]={items={773467906,2212207656,1790622152}},[\"Atmospheric Fuel Containers\"]={items={3039582547,3273319200,3464628964,2183619036}}}},[\"Item containers\"]={items={3514648916,2504111555,1832899704,1604594468,373451737,311555255,3514648919,2697077621,1604594467,1978507645,678611231,343666429,343666431,311555254,4257269380,1123475697,2431483718,2504111554,2125213321,2004990657,1604594466,2557270549,3983850218,3943113244,1832899705,521274609,1123475696,4257269383,200670527,3514648917,2504111556,3801121529,3705714977,343666430,4257269381,1594689569,3983850220,2557270546,3943113247,3943113245,987846328,2557270547,2747418228,1689381593,2697077515,1123475702,1154650699,3983850219,2533784020,1832899707,2697077620,311555253,572613525,373359444,2000409238}},[\"Mission Container\"]={items={1920590006,4029924807,386276308,4029924861,386276317,4029924862}}}}}},Systems={groups={[\"Territory Scanners\"]={items={3858829819}},[\"Control Units\"]={groups={[\"Generic Control Units\"]={items={3415128439}},[\"Gunner Module\"]={items={3327293642,1373443625,564736657}},[\"Emergency controllers\"]={items={286542481}},[\"Piloting Control Units\"]={groups={[\"Hovercraft cockpits\"]={items={1744160618}},[\"Remote Controllers\"]={items={1866437084}},[\"Command seat\"]={items={3655856020}},[\"Closed cockpits\"]={items={3640291983}}}}}},[\"Surrogate Station Equipment\"]={items={2093838343,3667785070}},[\"Resurrection Nodes\"]={items={1109114394}},[\"Teleportation Nodes\"]={}},items={2413564665}},[\"Furniture & Appliances\"]={groups={Lights={items={823697268,3524314552,677591159,3923388834,1603266808,2027152926,3981684520,632353355,25682791,3231255047,177821174,3180371725,787207321}},[\"Fireworks Launchers\"]={items={3882559017}},Displays={groups={Screens={groups={[\"Video screen\"]={},Signs={groups={[\"Admin signs\"]={}},items={3919696834,166656023,2610895147,3068429457,166549741,362159734,1533790308}}},items={184261427,879675317,3988663014,3988665660,3988662884,3988662951,184261558,184261490}},[\"Info Buttons\"]={items={3996923355}}}},Repulsors={},[\"High-Tech Furniture\"]={groups={[\"Virtual projectors\"]={items={3929462194}},[\"Force Fields\"]={items={3686074288,3685982092,3686006062,3685998465}}}},Doors={items={201196316,764397251,1139773633,1097676949,581667413,297147615,1256519882,2858887382,4249659729,3709017308,1289884535,741980535}},Chairs={items={3929116491,2169816178,3517217013,4186859262,4216497731,2453312794,3736537839,2846288811,1235633417,542122758,1261703398,2018455538,554266799}},[\"Decorative Element\"]={groups={Antennas={items={413322747,206489025,1951235468}},Adjuncts={items={3695530525,3292462663,2429336341,1894947006}},Board={items={542805258}},[\"Arkship Elements\"]={},[\"Deprecated decorative gun\"]={},Holograms={items={124823209,2137895179,85154060,1541106442,4090740447}},Windows={items={1900076171,2236273961,2158665549,3924941627,1326565833,4226053198,4167375414,3268459843,1952409967,242448402,515378511,3014939922,1804139232,894516284,3521312761,1484667376,2086563919,2266946860,561162197,1165506034,2792485016,2433054263,1001848134,695039310}},Barriers={items={3261824887,3261824822,1377211067}},Furniture={items={283549593,3893102542,4083139484,2428627426,1268259677,3813093434,3824401006,1082668972,1407324391,3845900543,1395483977,3813093435,3193900800,4083139459,4083139485,3193900802,3193900801,2216112746}},[\"Hull decoration\"]={items={3337817675,3337817677,3337817674,4145570204,1220701936}},[\"Bathroom Elements\"]={items={400937499}},[\"Decorative cables\"]={items={1542146746,1700326385,1542390549,1542390551,1700326384,1542146744,1700326390,1542146745,1542390550}},Plants={items={630574505,3106061130,3106061133,195870297,630574506,3106061140,3106061128,3106061129,195870296,195870294,195870295,630574502,630574503,1797415729,630574504,3106061141,3106061143,3106061142,195870299,2648123924,3106061131}},Pipes={items={2709793409,543225023,2937058341,2824951359,2123842216,2917319456}}}},[\"Electronic Elements\"]={groups={Electronics={groups={Relays={items={1694177571}},[\"Data Emitters\"]={items={1279651501,3287187256,2809213930}},[\"Logic Operators\"]={groups={[\"NAND Operators\"]={items={3600874516}},[\"XOR Operators\"]={items={3437395596}},[\"NOT operators\"]={items={2629309308}},[\"OR operators\"]={items={1707712023}},[\"NOR operators\"]={items={1839029088}},[\"AND operators\"]={items={2569152632}}}},Randomizers={},Databanks={items={812400865}},[\"Delay Lines\"]={items={1474604499}},Receivers={items={736740615,3732634076,2082095499}},[\"Laser Emitters\"]={items={609676854,1784722190}},Counters={items={888062910,888062908,888062905,888063487,888062906}},Toggles={}}},Sensors={groups={Telemeters={items={1722901246}},[\"Laser Detectors\"]={items={783555860,2153998731}},[\"Zone detectors\"]={items={485149481,485149228,485151209,4241228057}},[\"Light Detectors\"]={}}},Triggers={groups={[\"Manual Buttons\"]={items={2896791363,1550904282}},[\"Pressure tiles\"]={items={2012928469}},[\"Manual Switches\"]={items={4181147843}}}}}},Elevators={items={3663249627}}}}}},[\"Planet Elements\"]={groups={[\"Ground lights\"]={},[\"Territory Units\"]={items={1358842892,0}},[\"Core Units\"]={groups={[\"Static Core Units\"]={items={2738359963,2738359893,910155097,909184430}},[\"Dynamic Core Units\"]={items={1418170469,183890713,183890525,1417952990}},[\"Space Core Units\"]={items={5904195,5904544,3624942103,3624940909}}}}}}}},Materials={groups={[\"Refined Materials\"]={groups={Pure={groups={[\"Rare Pure Material\"]={items={3211418846,3837955371,2031444137,3323724376}},[\"Advanced Pure Material\"]={items={3822811562,3810111622,3012303017,1807690770}},[\"Deprecated Pure Materials\"]={},[\"Basic Pure Material\"]={items={2240749601,198782496,2589986891,159858782}},[\"Exotic Pure Material\"]={items={2007627267,752542080,1126600143,2421303625}},[\"Uncommon Pure Material\"]={items={2147954574,1466453887,3603734543,2112763718}}},items={947806142,1010524904}},Catalyst={items={3729464850,3729464848,3729464849}},Product={groups={Polymers={items={918590356,2097691217,2014531313,255776324,4103265826}},[\"Conductor Metals\"]={items={1673011820,18262914,2550840787,1734893264,1034957327}},[\"Heavy Metals\"]={items={511774178,2984358477,3987872305,167908167,3518490274}},[\"Light Metals\"]={items={231758472,2565702107,3292291904,2021406770,2929462635}},[\"Glass materials\"]={items={606249095,2301749833,4150961531,1942154251,3308209457}}},items={331532952,770773323,645870905,2646210914,2679709617,1622880428}}}},Fuels={groups={[\"Rocket Fuels\"]={items={106455050}},[\"Space Fuels\"]={items={840202981,840202986,840202980,840202987}},[\"Atmospheric Fuels\"]={items={2579672037}}}},[\"Honeycomb materials\"]={groups={[\"Pure Honeycomb Materials\"]={groups={[\"Silver Honeycomb\"]={items={3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609,3760652609}},[\"Manganese Honeycomb\"]={items={3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802,3522164802}},[\"Cobalt Honeycomb\"]={items={3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120,3292873120}},[\"Chromium Honeycomb\"]={items={1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224,1406093224}},[\"Titanium Honeycomb\"]={items={402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494,402511494}},[\"Calcium Honeycomb\"]={items={3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708,3628423708}},[\"Vanadium Honeycomb\"]={items={1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774,1605580774}},[\"Copper Honeycomb\"]={items={1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603,1374916603}},[\"Silicon Honeycomb\"]={items={4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329,4079996329}},[\"Nickel Honeycomb\"]={items={1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464,1194276464}},[\"Gold Honeycomb\"]={items={2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312,2892111312}},[\"Sulfur Honeycomb\"]={items={1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395,1519873395}},[\"Scandium Honeycomb\"]={items={2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742,2980173742}},[\"Aluminium Honeycomb\"]={items={123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466,123493466}},[\"Sodium Honeycomb\"]={items={2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922,2013004922}},[\"Niobium Honeycomb\"]={items={30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913,30546913}},[\"Fluorine Honeycomb\"]={items={1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000,1440099000}},[\"Carbon Honeycomb\"]={items={1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897,1063775897}},[\"Lithium Honeycomb\"]={items={1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115,1987555115}},[\"Iron Honeycomb\"]={items={2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075,2085561075}}}},[\"Product Honeycomb Materials\"]={groups={Wood={items={2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600,2497146600}},[\"Brick Honeycomb\"]={items={2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432,2698580432}},Marble={items={}},[\"Grade 5 Titanium Alloy\"]={items={483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306,483425306}},[\"Al-Li Honeycomb\"]={items={2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118,2906228118}},[\"Concrete Honeycomb\"]={items={38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863,38264863}},[\"Maraging Steel\"]={items={734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314,734351314}},Plastic={items={}},Silumin={items={3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135,3134890135}},Mangalloy={items={3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284,3573936284}},[\"Stainless Steel\"]={items={3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100,3200326100}},Inconel={items={1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708,1972837708}},[\"Duralumin Honeycomb\"]={items={1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154,1993502154}},Steel={items={}},[\"Sc-Al\"]={items={1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623,1160705623}},[\"Luminescent Glass Honeycomb\"]={items={1268122879}},[\"Carbon Fiber Honeycomb\"]={items={2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640,2647328640}}}}}},[\"Minable materials\"]={groups={Ore={groups={[\"Tier 4 Ores\"]={items={1866812055,3546085401,1467310917,271971371}},[\"Tier 5 Ores\"]={items={789110817,3934774987,0,629636034,2162350405}},[\"Tier 3 Ores\"]={items={1065079614,3837858336,4041459743,1050500112}},[\"Tier 1 Ores\"]={items={262147665,4234772167,3724036288,299255727}},[\"Tier 2 Ores\"]={items={2289641763,343766315,3086347393,2029139010}}}}}}}},Parts={groups={[\"Exceptional parts\"]={groups={[\"Quantum Barriers\"]={items={984088007,984088006,984088025}},[\"Antimatter cores\"]={items={375744325}},[\"Anti-gravity cores\"]={items={2999509692,2999509666,2999509693}},[\"Quantum Alignment Units\"]={items={2601646636,2601646634}}},items={2601646635}},[\"Complex parts\"]={groups={[\"Quantum Cores\"]={items={850241762,850241766,850241763,850241764,850241765}},[\"Solid Warheads\"]={items={2599686739,2599686738}},[\"Antimatter capsules\"]={items={3661595538,3661595539,3661595540}},Hydraulics={items={1331181089,1331181088,1331181091,1331181119,1331181118}},Magnets={items={1246524878,1246524879,1246524866,1246524876,1246524877}},[\"Singularity Containers\"]={items={3640212318,3640212315,3640212312,3640212314,3640212313}},Optics={items={3739200055,3739200049,3739200048,3739200050,3739200051}},Electronics={items={1297540454,1297540453,1297540452,1297540450,1297540451}},[\"Explosive Modules\"]={items={2541811485,2541811486,2541811484}},[\"Power Systems\"]={items={527681750,527681755,527681753,527681752,527681751}},Burners={items={2660328728,2660328735,2660328729,2660328734,2660328732}},Processors={items={3808417022,3808417020,3808417021}},Injectors={items={1971447078,1971447073,1971447072,1971447079}}},items={1971447076}},[\"Intermediary parts\"]={groups={Screws={items={3936127017,3936127018,3936127019}},LEDs={items={1234754161,1234754162,1234754160}},Fixations={items={466630564,466630567,466630565}},Connectors={items={2872711778,2872711781,2872711779}},Components={items={794666748,794666749,794666751}},Pipes={items={1799107246,1799107244,1799107247}}}},[\"Deprecated parts\"]={},[\"Functional parts\"]={groups={[\"Gas cylinders\"]={items={792299450,2119086168,2119086146}},[\"Firing systems\"]={items={3242492811,3242492880,3242492810,3740021214,3242491977,3740092443,3740074253,3242492875,3242492874,3242491976,3242492817,3242491986,3740078396}},[\"Control systems\"]={items={3431996502,3431996632,3431996504,3431996625,3431996639,972195890}},[\"Ore Scanners\"]={},Motherboards={items={242607950}},[\"Combustion Chambers\"]={items={4016318475,2662310021,2662310020,2662317126,2662310081,2662310018,4017996241,2662310087,2662309888,4016322616,2662310086,2662309894,2662317132,2662309895,4016359657,2662317125}},[\"Optical sensors\"]={},[\"Power Transformer\"]={items={4186206035,4186205972,4186206037,3291043715,4186198417,4186198483,4186198480}},[\"Laser Chambers\"]={items={1252823771,2825505990,1252764131,2825506200,2825503297,1252768242,2825503320,1252823760,2825506265,2825506266,2825506203,2825503323,2825506243,1252768249,1252819658,2825506178,1252764136,1252819649,1252839764}},[\"Core Systems\"]={items={1775106424,1775106685,1775106620,1775106492,1775106618,1775106597,1172598456,1775106556}},[\"Mechanical Sensors\"]={items={204462057,204444775,204469317}},[\"Chemical containers\"]={items={625289663,625289726,625115179,3717621915,625115345,625289720,625115176,625289727,3714764686,3717621906,625115241,625115242}},[\"Magnetic Rails\"]={items={2722609530,2722609330,2722609340,4210044590,4210065279,2722610741,2722609523,2722609339,2722610747,4211034905,2722609533,2722610746}},Screens={items={184261422,184261412,1428596467,184261478,1428608303,1428608292,1428596474}},Antennas={items={1080827739,1080827609,1080827615,2302040376,1080827716,1080827527,2301991355,1080827674,1080827653,1080827590,2302027954,1080827544,1080826905,2301991330,1080827550,1080827676,1080827741}},Lights={items={1829611507,3345566836}},[\"Mobile Panels\"]={items={407969641,494821798,407844040,494821860,494825061,407844051,407690298,494823730,407690291,494823725,494821797,494825062,494821804,494821863,408022872,407969632,494825071,494821869,494823731,408022865}},[\"Missile Silos\"]={items={3857142758,3857142317,3857142311,3857142764,3857142113,3026262169,3026356360,3857142123,3857142757,3857142308,3857142112,3026385661}},[\"Robotic Arms\"]={items={997370746,2999955044,997368796,997368670,997368799,997368607}},[\"Electric engines\"]={items={3172866509,3728054834,3728054836}},[\"Ionic chambers\"]={items={1390563239,962704747,1390563172,962712579,1390562878,962712586,962700657,962704738,962700664,1390562879,1390563256,1390563262,963003738,1390562873,1390563302,1390563327,1390563321,1390563197,963003731,1390563195}}},items={962696457,788805607,3501535583,3501536145,4016282202,3501535518,1390563132,3501535314,3501536208,962696448,3501535556,1390563130,1390563109}},[\"Structural Parts\"]={groups={[\"Reinforced Frames\"]={items={994058205,994057994,1179610516,994058140,994058003,994058004,994058069,994058059,1179605664,994058204,1179601462,1179610525,994057936,1179605671,1179601457,994058066,1179614604,1179614597,994058119,1179593235,1179593236,994057929,994058182,994058141,994057943}},Casings={items={946516044,946524256,946544989,946544964,567007775,946503935,567007899,946516085,567008209,567008215,567007760,567007766,567008148}},[\"Standard Frames\"]={items={873622227,1981363757,873663991,1981362606,1981362536,1981362607,1981362473,1981362581,1981363926,1981363756,1981362671,1981362670,873622058,1981363796,873676070,1981362450,1981362539,1981362643,1981362474,873614065}}}}}}}; end)"},{"key":13,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/data/ItemGroups'] = (function (...) ---@type table<string, ItemGroup>\nITEM_GROUPS = require('du-industry-hud:du_lib/data/raw/ItemGroupsRaw')\n\nI_GROUP_FUEL = 'Fuels'\nI_GROUP_ATMO_FUEL = 'Atmospheric Fuels'\nI_GROUP_SPACE_FUEL = 'Space Fuels'\nI_GROUP_ROCKET_FUEL = 'Rocket Fuels'\n\nI_GROUP_INT_PART = 'Intermediary Parts'\nI_GROUP_FUNC_PART = 'Functional Parts'\nI_GROUP_STRUCT_PART = 'Structural Parts'\nI_GROUP_COMPLEX_PART = 'Complex Parts'\nI_GROUP_EXCEPT_PART = 'Exceptional Parts'\n\n---@type string\nI_GROUP_ORE = 'Ore'\nI_GROUP_PURE = 'Pure'\nI_GROUP_PRODUCT = 'Product'\n\nI_GROUP_CONSUMABLES = 'Consumables'\nI_GROUP_AMMO = 'Ammunition'\nI_GROUP_SCRAP = 'Scraps'\nI_GROUP_WARP_CELL = 'Warp Cell'\n\n---@class ItemGroup\n---@field groups table<string, ItemGroup>\n---@field items number[]\nItemGroup = {}\n\n---@param group string\n---@param scope table<string, ItemGroup>\n---@return ItemGroup\nlocal function findItemGroup(group, scope)\n    for name, groupDef in pairs(scope) do\n        if name:lower() == group:lower() then\n            return groupDef\n        end\n\n        if groupDef.groups then\n            local child = findItemGroup(group, groupDef.groups)\n            if child then\n                return child\n            end\n        end\n    end\n\n    return nil\nend\n\n---@type table<string, ItemGroup>\nlocal foundItemGroups = {}\n---@param group string\n---@return ItemGroup\nfunction ItemGroup.findItemGroup(group)\n    local foundItemGroup = foundItemGroups[group]\n    if foundItemGroup then\n        return foundItemGroup\n    end\n\n    local itemGroup = findItemGroup(group, ITEM_GROUPS)\n    if not itemGroup then\n        error(\"Could not find item group: \" .. group)\n    end\n\n    foundItemGroups[group] = itemGroup\n\n    return itemGroup\nend\n\n---@type table<ItemGroup, number[]>\nlocal cachedItemsInGroups = {}\n---@param itemGroup ItemGroup\n---@return number[]\nlocal function getAllItemsInGroup(itemGroup)\n    ---@type number[]\n    local items = { }\n\n    local cached = cachedItemsInGroups[itemGroup]\n    if cached then\n        return cached\n    end\n\n    if itemGroup.groups then\n        for _, group in pairs(itemGroup.groups) do\n            local groupItems = getAllItemsInGroup(group)\n            table.move(groupItems, 1, #groupItems, #items + 1, items)\n        end\n    end\n\n    if itemGroup.items then\n        for _, item in ipairs(itemGroup.items) do\n            table.insert(items, item)\n        end\n    end\n    cachedItemsInGroups[itemGroup] = items\n\n    return items\nend\n\n---@param itemGroup ItemGroup\n---@return number[]\nfunction ItemGroup.getItemsInGroup(system, itemGroup, tier, size)\n    local allItems = getAllItemsInGroup(itemGroup)\n    if not (tier or size) then\n        return allItems\n    end\n\n    local items = {}\n    for _, item in ipairs(allItems) do\n        local itemId = --[[---@type number]] item\n        local itemDef = system.getItem(itemId)\n        if (not tier or tier == itemDef.tier) and (not size or size:lower() == itemDef.size:lower()) then\n            table.insert(items, itemId)\n        end\n    end\n\n    return items\nend; end)"},{"key":14,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/data/raw/TalentTemplatesRaw'] = (function (...) ---@class TalentTemplate\n---@field name string\n---@field group string\n---@field type string\n---@field amount number\n---@field byTier number[]\n---@field bySize string[]\n---@field TYPE_OUT string\n---@field TYPE_IN string\n---@field TYPE_TIME string\nTalentTemplate = {}\nTalentTemplate.__index = TalentTemplate\n\nTalentTemplate.TYPE_OUT = 'output'\nTalentTemplate.TYPE_IN = 'input'\nTalentTemplate.TYPE_TIME = 'time'\n\n---@param isFixedAmount boolean\n---@return TalentTemplate\nlocal function talentTemplate(name, group, type, amount, byTier, bySize, byProduct, isFixedAmount)\n    local self = --[[---@type TalentTemplate]] {}\n\n    self.name = name\n    self.group = group\n    self.type = type\n    self.amount = amount\n    self.byTier = byTier\n    self.bySize = bySize\n    self.byProduct = byProduct or false\n    self.isFixedAmount = isFixedAmount or false\n\n    return setmetatable(self, TalentTemplate)\nend\n\n---@overload fun(name, group, type, amount) : TalentTemplate\n---@return TalentTemplate\nlocal function talentTemplateSingle(name, group, type, amount, isFixedAmount)\n    return talentTemplate(name, group, type, amount, nil, nil, false, isFixedAmount)\nend\n\n---@overload fun(name, group, tiers, type, amount) : TalentTemplate\n---@return TalentTemplate\nlocal function talentTemplateByTier(name, group, type, tiers, amount, isFixedAmount)\n    return talentTemplate(name, group, type, amount, tiers, nil, false, isFixedAmount)\nend\n\n---@overload fun(name, group, type, amount) : TalentTemplate\n---@return TalentTemplate\nlocal function talentTemplateByProduct(name, group, type, amount, isFixedAmount)\n    return talentTemplate(name, group, type, amount, nil, nil, true, isFixedAmount)\nend\n\n---@overload fun(name, group, type, tiers, sizes, amount) : TalentTemplate\n---@return TalentTemplate\nlocal function talentTemplateByTierAndSize(name, group, type, tiers, sizes, amount, isFixedAmount)\n    return talentTemplate(name, group, type, amount, tiers, sizes, false, isFixedAmount)\nend\n\nT_GROUP_FUEL_PROD = 'Fuel Productivity'\nT_NAME_ATMO_FUEL_PROD = 'Atmospheric Fuel Productivity'\nT_NAME_SPACE_FUEL_PROD = 'Space Fuel Productivity'\nT_NAME_ROCKET_FUEL_PROD = 'Rocket Fuel Productivity'\n\nT_GROUP_FUEL_REF = 'Fuel Refining'\nT_NAME_FUEL_EFF = 'Fuel Efficiency'\nT_NAME_FUEL_REF = 'Fuel Refinery'\nT_NAME_ATMO_FUEL_REF = 'Atmospheric Fuel Refinery'\nT_NAME_SPACE_FUEL_REF = 'Space Fuel Refinery'\nT_NAME_ROCKET_FUEL_REF = 'Rocket Fuel Refinery'\n\nT_GROUP_INT_PART_PROD = 'Intermediary Part Productivity'\nT_NAME_INT_PART_PROD = 'Intermediary Part Productivity'\n\nT_GROUP_AMMO_PROD = 'Ammo Productivity'\nT_NAME_AMMO_EFF = 'Ammo Efficiency'\nT_NAME_AMMO_PROD = 'Ammo Productivity'\n\nT_GROUP_COMP_PART_MAN = 'Complex Parts Manufacturer'\nT_NAME_COMP_PART_MAN = 'Complex Parts Manufacturer'\n\nT_GROUP_EX_PART_MAN = 'Exceptional Parts Manufacturer'\nT_NAME_EX_PART_MAN = 'Exceptional Parts Manufacturer'\n\nT_GROUP_FUNC_PART_MAN = 'Functional Parts Manufacturer'\nT_NAME_FUNC_PART_MAN = 'Functional Parts Manufacturer'\n\nT_GROUP_STRUCT_PART_MAN = 'Structural Parts Manufacturer'\nT_NAME_STRUCT_PART_MAN = 'Structural Parts Manufacturer'\n\nT_GROUP_INT_PART_MAN = 'Intermediary Parts Manufacturer'\nT_NAME_INT_PART_MAN = 'Intermediary Parts Manufacturer'\n\nT_GROUP_ORE_REF = 'Ore Refining'\nT_NAME_PURE_REF_EFF = 'Pure Refinery Efficiency'\nT_NAME_ORE_REF = 'Ore Refining'\n\nT_GROUP_PURE_PROD = 'Pure Productivity'\nT_NAME_PURE_PROD = 'Pure Productivity'\n\nT_GROUP_PROD_REF = 'Product Refining'\nT_NAME_PROD_REF_EFF = 'Product Refinery Efficiency'\nT_NAME_PROD_REF = 'Product Refining'\n\nT_GROUP_PROD_PROD = 'Product Productivity'\nT_NAME_PROD_PROD = 'Product Productivity'\n\nT_GROUP_SCRAP_REF = 'Scrap Refining'\nT_NAME_SCRAP_EFF = 'Scrap Efficiency'\nT_NAME_TIER_SCRAP_REF = 'Tier Scrap Refinery'\nT_NAME_SCRAP_REF = 'Scrap Refinery'\n\nT_GROUP_SCRAP_PROD = 'Scrap Productivity'\nT_NAME_SCRAP_PROD = 'Scrap Productivity'\n\nreturn --[[---@type table<string, TalentTemplate[]> ]] {\n    --Crafting Talents\n    [T_GROUP_FUEL_PROD] = {\n        talentTemplateSingle(T_NAME_ATMO_FUEL_PROD, I_GROUP_ATMO_FUEL, TalentTemplate.TYPE_OUT, 0.05),\n        talentTemplateSingle(T_NAME_SPACE_FUEL_PROD, I_GROUP_SPACE_FUEL, TalentTemplate.TYPE_OUT, 0.05),\n        talentTemplateSingle(T_NAME_ROCKET_FUEL_PROD, I_GROUP_ROCKET_FUEL, TalentTemplate.TYPE_OUT, 0.05),\n    },\n    [T_GROUP_FUEL_REF] = {\n        talentTemplateSingle(T_NAME_FUEL_EFF, I_GROUP_FUEL, TalentTemplate.TYPE_TIME, 0.1),\n        talentTemplateSingle(T_NAME_FUEL_REF, I_GROUP_FUEL, TalentTemplate.TYPE_IN, 0.02),\n        talentTemplateSingle(T_NAME_ATMO_FUEL_REF, I_GROUP_ATMO_FUEL, TalentTemplate.TYPE_IN, 0.03),\n        talentTemplateSingle(T_NAME_SPACE_FUEL_REF, I_GROUP_SPACE_FUEL, TalentTemplate.TYPE_IN, 0.03),\n        talentTemplateSingle(T_NAME_ROCKET_FUEL_REF, I_GROUP_ROCKET_FUEL, TalentTemplate.TYPE_IN, 0.03)\n    },\n    [T_GROUP_INT_PART_PROD] = {\n        talentTemplateByTier(T_NAME_INT_PART_PROD, I_GROUP_INT_PART, TalentTemplate.TYPE_OUT, {1, 2, 3}, 1, true),\n    },\n    [T_GROUP_AMMO_PROD] = {\n        talentTemplateByTier(T_NAME_AMMO_EFF, I_GROUP_AMMO, TalentTemplate.TYPE_TIME, {2, 3}, 0.1),\n        talentTemplateByTierAndSize(T_NAME_AMMO_PROD, I_GROUP_AMMO, TalentTemplate.TYPE_OUT, {2,3}, {'XS', 'S', 'M', 'L'}, 1, true),\n    },\n    [T_GROUP_COMP_PART_MAN] = {\n        talentTemplateByTier(T_NAME_COMP_PART_MAN, I_GROUP_COMPLEX_PART, TalentTemplate.TYPE_TIME, {1, 2, 3, 4, 5}, 0.1),\n    },\n    [T_GROUP_EX_PART_MAN] = {\n        talentTemplateByTier(T_NAME_EX_PART_MAN, I_GROUP_EXCEPT_PART, TalentTemplate.TYPE_TIME, {3, 4, 5}, 0.1),\n    },\n    [T_GROUP_FUNC_PART_MAN] = {\n        talentTemplateByTier(T_NAME_FUNC_PART_MAN, I_GROUP_FUNC_PART, TalentTemplate.TYPE_TIME, {1, 2, 3, 4, 5}, 0.1),\n    },\n    [T_GROUP_STRUCT_PART_MAN] = {\n        talentTemplateByTier(T_NAME_STRUCT_PART_MAN, I_GROUP_STRUCT_PART, TalentTemplate.TYPE_TIME, {1, 2, 3, 4, 5}, 0.1),\n    },\n    [T_GROUP_INT_PART_MAN] = {\n        talentTemplateByTier(T_NAME_INT_PART_MAN, I_GROUP_INT_PART, TalentTemplate.TYPE_TIME, {1, 2, 3}, 0.1),\n    },\n    [T_GROUP_ORE_REF] = {\n        talentTemplateByTier(T_NAME_PURE_REF_EFF, I_GROUP_PURE, TalentTemplate.TYPE_TIME, {1, 2, 3, 4, 5}, 0.05),\n        talentTemplateByProduct(T_NAME_ORE_REF, I_GROUP_PURE, TalentTemplate.TYPE_IN, 0.03),\n    },\n    [T_GROUP_PURE_PROD] = {\n        talentTemplateByProduct(T_NAME_PURE_PROD, I_GROUP_PURE, TalentTemplate.TYPE_OUT, 0.03),\n    },\n    [T_GROUP_PROD_REF] = {\n        talentTemplateByTier(T_NAME_PROD_REF_EFF, I_GROUP_PRODUCT, TalentTemplate.TYPE_TIME, {1, 2, 3, 4, 5}, 0.05),\n        talentTemplateByProduct(T_NAME_PROD_REF, I_GROUP_PRODUCT, TalentTemplate.TYPE_IN, 0.03)\n    },\n    [T_GROUP_PROD_PROD] = {\n        talentTemplateByProduct(T_NAME_PROD_PROD, I_GROUP_PRODUCT, TalentTemplate.TYPE_OUT, 0.03),\n    },\n    --ignoring honeycomb on purpose\n    [T_GROUP_SCRAP_REF] = {\n        talentTemplateByTier(T_NAME_SCRAP_EFF, I_GROUP_SCRAP, TalentTemplate.TYPE_TIME, {1, 2, 3, 4, 5}, 0.1),\n        talentTemplateByTier(T_NAME_TIER_SCRAP_REF, I_GROUP_SCRAP, TalentTemplate.TYPE_IN, {1, 2, 3, 4, 5}, 1, true),\n        talentTemplateByProduct(T_NAME_SCRAP_REF, I_GROUP_SCRAP, TalentTemplate.TYPE_IN, 2, true),\n    },\n    [T_GROUP_SCRAP_PROD] = {\n        talentTemplateByProduct(T_NAME_SCRAP_PROD, I_GROUP_SCRAP, TalentTemplate.TYPE_OUT, 1, true),\n    },\n    --Industry Talents: Not in use since we have no way of retrieving the industries that produces each item\n}; end)"},{"key":15,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/data/Talents'] = (function (...) require('du-industry-hud:du_lib/requires/service')\nrequire('du-industry-hud:du_lib/data/ItemGroups')\n\n---@type table<string, TalentTemplate[]>\nTALENT_TEMPLATES = require('du-industry-hud:du_lib/data/raw/TalentTemplatesRaw')\n\n---@class Talent\n---@field name string\n---@field level number\n---@field template TalentTemplate\n---@field product number id\n---@field tier number\n---@field size string\nTalent = {}\nTalent.__index = Talent\n\n---@param name string\n---@param level number\n---@param template TalentTemplate\n---@param product number id\n---@param tier number\n---@param size string\n---@return Talent\nlocal function talent(name, level, template, product, tier, size)\n    local self = --[[---@type self]] {}\n\n    self.name = name\n    self.level = level\n    self.template = template\n    self.product = product\n    self.tier = tier\n    self.size = size\n\n    return setmetatable(self, Talent)\nend\n\n---@type string[]\nlocal TIER_NAMES = { 'Basic', 'Uncommon', 'Advanced', 'Rare', 'Exotic' }\n\n---@class TalentsRepo : Service\nTalentsRepo = {}\nTalentsRepo.__index = TalentsRepo\n\n---@class TalentsRepoEvents\nTALENTS_REPO_EVENTS = {}\n---handler: func(self, talents)\nTALENTS_REPO_EVENTS.REFRESH = 'onRefresh'\n\n---@param system System\n---@param db Databank talent levels db\n---@return TalentsRepo\nfunction TalentsRepo.new(system, db)\n    local self = --[[---@type self]] Service.new()\n\n    ---@param permit CoroutinePermit\n    ---@return table<string, Talent[]>\n    local function loadTalents(permit)\n        ---@type table<string, Talent[]>\n        local talents = {}\n\n        for templateGroup, templates in pairs(TALENT_TEMPLATES) do\n            ---@type Talent[]\n            local groupTalents = {}\n            for _, template in ipairs(templates) do\n                permit.acquire()\n                local itemGroup = ItemGroup.findItemGroup(template.group)\n                if template.byProduct then\n                    local items = ItemGroup.getItemsInGroup(system, itemGroup, nil, nil)\n                    for _, itemId in ipairs(items) do\n                        permit.acquire()\n\n                        local item = system.getItem(itemId)\n                        local name = item.displayNameWithSize .. ' ' .. template.name\n                        local talent = talent(name, 0, template, itemId, nil, nil)\n                        table.insert(groupTalents, talent)\n                    end\n                elseif template.byTier then\n                    for _, tier in ipairs(template.byTier) do\n                        local tierName = TIER_NAMES[tier] .. ' ' .. template.name\n                        if template.bySize then\n                            for _, size in ipairs(template.bySize) do\n                                permit.acquire()\n\n                                local name = tierName .. ' ' .. size:upper()\n                                local talent = talent(name, 0, template, nil, tier, size)\n                                table.insert(groupTalents, talent)\n                            end\n                        else\n                            permit.acquire()\n\n                            local talent = talent(tierName, 0, template, nil, tier, nil)\n                            table.insert(groupTalents, talent)\n                        end\n                    end\n                else\n                    local name = template.group .. ' ' .. template.name\n                    local talent = talent(name, 0, template, nil, nil, nil)\n                    table.insert(groupTalents, talent)\n                end\n            end\n            talents[templateGroup] = groupTalents\n        end\n\n        return talents\n    end\n\n    ---@type table<string, Talent[]>\n    local talents\n    ---@param permit CoroutinePermit\n    local function refresh(permit)\n        if not talents then\n            talents = loadTalents(permit)\n        end\n\n        for _, groupTalents in pairs(talents) do\n            for _, talent in ipairs(groupTalents) do\n                permit.acquire()\n                local level = db.getIntValue(talent.name)\n                if level and level >= 0 then\n                    talent.level = level\n                end\n            end\n        end\n\n        self:triggerEvent(TALENTS_REPO_EVENTS.REFRESH, talents)\n    end\n\n    ---@param state State\n    function self.start(state)\n        state.registerCoroutine(self, 'TalentsRepo_refresh', refresh, true)\n    end\n\n    return setmetatable(self, TalentsRepo)\nend; end)"},{"key":16,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/crafting/RecipeManager'] = (function (...) require('du-industry-hud:du_lib/requires/service')\nrequire('du-industry-hud:du_lib/data/Talents')\nrequire('du-industry-hud:du_lib/data/ItemGroups')\n\n---@class ItemTalentsEffect\n---@field timeDiscount number\n---@field inputFixedDiscount number\n---@field inputPercentDiscount number\n---@field outputFixedPremium number\n---@field outputPercentPremium number\nItemTalentsEffect = {}\n\n---@return ItemTalentsEffect\nfunction ItemTalentsEffect.new()\n    local self = --[[---@type self]] {}\n\n    self.timeDiscount = 0\n    self.inputFixedDiscount = 0\n    self.inputPercentDiscount = 0\n    self.outputFixedPremium = 0\n    self.outputPercentPremium = 0\n\n    ---@param talent Talent\n    function self.applyTalent(talent)\n        local template = talent.template\n        if template.type == TalentTemplate.TYPE_OUT then\n            if template.isFixedAmount then\n                self.outputFixedPremium = self.outputFixedPremium + template.amount * talent.level\n            else\n                self.outputPercentPremium = self.outputPercentPremium + template.amount * talent.level\n            end\n        elseif template.type == TalentTemplate.TYPE_IN then\n            if template.isFixedAmount then\n                self.inputFixedDiscount = self.inputFixedDiscount + template.amount * talent.level\n            else\n                self.inputPercentDiscount = self.inputPercentDiscount + template.amount * talent.level\n            end\n        elseif template.type == TalentTemplate.TYPE_TIME then\n            self.timeDiscount = self.timeDiscount + template.amount * talent.level\n        end\n    end\n\n    return setmetatable(self, ItemTalentsEffect)\nend\n\n---@param system System\n---@param group string\n---@param product number id\n---@param tier number\n---@param size string\n---@return number[] ids\nlocal function getAffectedItems(system, group, product, tier, size)\n    local itemGroup = ItemGroup.findItemGroup(group)\n\n    ---@type number[]\n    local items = {}\n\n    if product then\n        items = { product }\n    else\n        items = ItemGroup.getItemsInGroup(system, itemGroup, tier, size)\n    end\n\n    return items\nend\n\n---@param system System\n---@param talents Talent[]\n---@param permit CoroutinePermit\n---@return table<number, ItemTalentsEffect>\nlocal function calculateTalents(system, talents, permit)\n    ---@type table<number, ItemTalentsEffect>\n    local calculatedTalents = {}\n\n    for _, talent in ipairs(talents) do\n        permit.acquire()\n        local items = getAffectedItems(system, talent.template.group, talent.product, talent.tier, talent.size)\n\n        for _, item in ipairs(items) do\n            permit.acquire()\n            calculatedTalents[item] = calculatedTalents[item] or ItemTalentsEffect.new()\n            local itemTalentsEffect = calculatedTalents[item]\n            itemTalentsEffect.applyTalent(talent)\n        end\n    end\n\n    return calculatedTalents\nend\n\n---@class RecipeItem\n---@field id number\n---@field quantity number\n\n---@class Recipe\n---@field id number\n---@field tier number\n---@field time number\n---@field nanocraftable boolean\n---@field products RecipeItem[]\n---@field ingredients RecipeItem[]\n\n---@param system System\n---@param talentsEffects table<number, ItemTalentsEffect>\n---@param permit CoroutinePermit\n---@return table<number, Recipe>\nlocal function adjustRecipes(system, talentsEffects, permit)\n    ---@type table<number, Recipe>\n    local recipes = {}\n\n    for itemId, talentsEffect in pairs(talentsEffects) do\n        local recipe = RecipeManager.getRawRecipe(system, itemId)\n\n        recipe.time = recipe.time * (1 - talentsEffect.timeDiscount)\n\n        for _, output in ipairs(recipe.products) do\n            permit.acquire()\n            output.quantity = output.quantity * (1 + talentsEffect.outputPercentPremium) + talentsEffect.outputFixedPremium\n        end\n\n        for _, input in ipairs(recipe.ingredients) do\n            permit.acquire()\n            input.quantity = input.quantity * (1 - talentsEffect.inputPercentDiscount) + talentsEffect.inputFixedDiscount\n        end\n\n        recipes[itemId] = recipe\n    end\n\n    return recipes\nend\n\n---@class RecipeManager : Service\nRecipeManager = {}\nRecipeManager.__index = RecipeManager\n\n---@param system System\n---@param itemId number\n---@return Recipe\nfunction RecipeManager.getRawRecipe(system, itemId)\n    local recipes = --[[---@type Recipe[] ]] system.getRecipes(itemId)\n\n    for _, recipe in ipairs(recipes) do\n        if recipe.products[1].id == itemId then\n            return recipe\n        end\n    end\n\n    return nil\nend\n\n---@class RecipeManagerEvents\nRECIPE_MANAGER_EVENTS = {}\n---handler: func(self)\nRECIPE_MANAGER_EVENTS.REFRESH = 'onRefresh'\n\n---@param system System\n---@param talentsRepo TalentsRepo\n---@return RecipeManager\nfunction RecipeManager.new(system, talentsRepo)\n    local self = --[[---@type self]] Service.new()\n\n    ---@type Talent[]\n    local talents\n    local function updateTalents(_, newTalents)\n        talents = newTalents\n    end\n\n    ---@type table<number, Recipe>\n    local adjustedRecipes\n    ---@type table<number, boolean>\n    local knownItems\n\n    ---@param permit CoroutinePermit\n    local function refresh(permit)\n        if not knownItems then\n            ---@type table<number, boolean>\n            local knownItemsInit = {}\n            for _, group in pairs(ITEM_GROUPS) do\n                local items = ItemGroup.getItemsInGroup(system, group, nil, nil)\n                for _, item in ipairs(items) do\n                    permit.acquire()\n                    knownItemsInit[item] = true\n                end\n                permit.yield() --no overloads for me ty!\n            end\n            knownItems = knownItemsInit\n        end\n        while not talents do\n            permit.yield()\n        end\n\n        local talentsEffects = calculateTalents(system, talents, permit)\n        adjustedRecipes = adjustRecipes(system, talentsEffects, permit)\n\n        self:triggerEvent(RECIPE_MANAGER_EVENTS.REFRESH)\n    end\n\n    ---@param itemId number\n    ---@return Recipe\n    function self.getAdjustedRecipe(itemId)\n        if not adjustedRecipes then\n            error(\"RecipeManager can't be called until refresh event is first emitted.\")\n        end\n\n        if not knownItems[itemId] then\n            error('Attempting to retrieve adjusted recipe for unknown item with id ' .. itemId)\n        end\n\n        local recipe = adjustedRecipes[itemId]\n        if not recipe then\n            recipe = RecipeManager.getRawRecipe(system, itemId)\n            adjustedRecipes[itemId] = recipe\n        end\n\n        if not recipe then\n            local msg = \"Could not find recipe for itemId \" .. itemId\n            local item = system.getItem(itemId)\n            if item and item.displayNameWithSize then\n                msg = msg .. ' ' .. item.displayNameWithSize\n            end\n            error(msg)\n        end\n\n        return recipe\n    end\n\n    ---@param state State\n    function self.start(state)\n        state.registerHandler(talentsRepo, TALENTS_REPO_EVENTS.REFRESH, updateTalents)\n        state.registerCoroutine(self, 'RecipeManager_refresh', refresh, true)\n    end\n\n    return setmetatable(self, RecipeManager)\nend; end)"},{"key":17,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/utils/fn_strSplit'] = (function (...) ---@param s string\n---@param delimiter string\n---@return string[]\nlocal function strSplit(s, delimiter)\n    local result = {};\n    for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n        table.insert(result, match);\n    end\n    return result;\nend\n\nreturn strSplit; end)"},{"key":18,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:IndustryHudMaster/model/IndustryHudContainer'] = (function (...) local strSplit = require('du-industry-hud:du_lib/utils/fn_strSplit')\n\n---@class IndustryHudContainer\nIndustryHudContainer = {}\nIndustryHudContainer.__index = IndustryHudContainer\n\n---@type table<string, number>\nlocal CONTAINER_VOLUME_LIST = { xxl = 512000, xl = 256000, l = 128000, m = 64000, s = 8000, xs = 1000 }\n\n---@param core CoreUnit\n---@param id number\n---@return boolean\nfunction IndustryHudContainer.isContainer(core, id)\n    local elementType = core.getElementDisplayNameById(id):lower()\n    return --[[---@type boolean]] elementType:lower():find(\"container\")\nend\n\n---@param core CoreUnit\n---@param containerProficiencyLvl number\n---@param containerOptimizationLvl number\n---@return IndustryHudContainer\nfunction IndustryHudContainer.new(core, id, containerProficiencyLvl, containerOptimizationLvl)\n    local self = --[[---@type self]] { }\n\n    self.id = id\n\n    function self.refresh()\n        local type = core.getElementDisplayNameById(id)\n        self.type = type\n        local name = core.getElementNameById(id)\n        self.name = name\n\n        local splitName = strSplit(name, '_')\n        if #splitName == 1 then\n            return\n        end\n\n        local itemId = tonumber(splitName[2])\n\n        local containerSize = \"XS\"\n        local containerAmount = 1\n        local containerEmptyMass = 0\n        local containerVolume = 0\n\n        if not type:lower():find(\"hub\") then\n            local containerMaxHP = core.getElementMaxHitPointsById(itemId)\n            if containerMaxHP > 68000 then\n                containerSize = \"XXL\"\n                containerEmptyMass = 88410\n                containerVolume = 512000 * (containerProficiencyLvl * 0.1) + 512000\n            elseif containerMaxHP > 33000 then\n                containerSize = \"XL\"\n                containerEmptyMass = 44210\n                containerVolume = 256000 * (containerProficiencyLvl * 0.1) + 256000\n            elseif containerMaxHP > 17000 then\n                containerSize = \"L\"\n                containerEmptyMass = 14842.7\n                containerVolume = 128000 * (containerProficiencyLvl * 0.1) + 128000\n            elseif containerMaxHP > 7900 then\n                containerSize = \"M\"\n                containerEmptyMass = 7421.35\n                containerVolume = 64000 * (containerProficiencyLvl * 0.1) + 64000\n            elseif containerMaxHP > 900 then\n                containerSize = \"S\"\n                containerEmptyMass = 1281.31\n                containerVolume = 8000 * (containerProficiencyLvl * 0.1) + 8000\n            else\n                containerSize = \"XS\"\n                containerEmptyMass = 229.09\n                containerVolume = 1000 * (containerProficiencyLvl * 0.1) + 1000\n            end\n        else\n            if splitName[3] then\n                containerSize = splitName[3]\n            end\n            if splitName[4] then\n                containerAmount = tonumber(splitName[4])\n            end\n\n            local volume = 0\n            containerSize = containerSize:lower()\n            if CONTAINER_VOLUME_LIST[containerSize] then\n                volume = CONTAINER_VOLUME_LIST[containerSize]\n            end\n            containerVolume = (volume * containerProficiencyLvl * 0.1 + volume) * tonumber(containerAmount)\n            containerEmptyMass = 55.8\n        end\n\n        local item = system.getItem(itemId)\n        local totalMass = core.getElementMassById(id)\n        local contentMassKg = totalMass - containerEmptyMass\n\n        self.itemId = itemId\n        self.itemName = item.displayNameWithSize\n        self.quantity = contentMassKg / (item.unitMass - (item.unitMass * (containerOptimizationLvl * 0.05)))\n        self.volume = containerVolume\n        self.percent = utils.round((item.unitVolume * self.quantity) * 100 / containerVolume)\n\n        if item.name == \"InvalidItem\" then\n            self.percent = 0\n            self.quantity = 0\n        end\n        if self.percent > 100 then\n            self.percent = 100\n        end\n    end\n\n    return setmetatable(self, IndustryHudContainer)\nend; end)"},{"key":19,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:IndustryHudMaster/services/RecipeContainerHighlighter'] = (function (...) require('du-industry-hud:du_lib/requires/service')\nrequire('du-industry-hud:du_lib/crafting/RecipeManager')\n\nrequire('du-industry-hud:IndustryHudMaster/model/IndustryHudContainer')\n\n---@class RecipeContainerHighlighter : Service\nRecipeContainerHighlighter = {}\nRecipeContainerHighlighter.__index = RecipeContainerHighlighter\n\nlocal function ConvertLocalToWorld(a, b, c, d, e)\n    local f = { a[1] * c[1], a[1] * c[2], a[1] * c[3] }\n    local g = { a[2] * d[1], a[2] * d[2], a[2] * d[3] }\n    local h = { a[3] * e[1], a[3] * e[2], a[3] * e[3] }\n    return { f[1] + g[1] + h[1] + b[1], f[2] + g[2] + h[2] + b[2], f[3] + g[3] + h[3] + b[3] }\nend\n\n---@param system System\n---@param core CoreUnit\n---@param containerProficiencyLvl number\n---@param containerOptimizationLvl number\n---@return RecipeContainerHighlighter\nfunction RecipeContainerHighlighter.new(system, core, containerProficiencyLvl, containerOptimizationLvl)\n    local self = --[[---@type self]] Service.new()\n\n    ---@type table<number, IndustryHudContainer[]>\n    local containers\n    ---@type number[]\n    local ingredientItemIds\n    ---@type number\n    local outputItemId\n\n    ---@param productItemId number\n    ---@return number\n    function self.getTotal(productItemId)\n        local containers = containers\n        local quantity = 0\n        if containers then\n            local productContainers = containers[productItemId]\n            if productContainers then\n                for _, container in ipairs(productContainers) do\n                    quantity = quantity + container.quantity\n                end\n            end\n        end\n\n        return quantity\n    end\n\n    ---@param productItemId number\n    function self.updateOutput(productItemId)\n        if productItemId and productItemId >= 0 then\n            local recipe = RecipeManager.getRawRecipe(system, productItemId)\n\n            local newIngredients = {}\n            for _, ingredient in ipairs(recipe.ingredients) do\n                ---@type any\n                local ingredient = ingredient\n                table.insert(newIngredients, --[[---@type number]] ingredient.id)\n            end\n            outputItemId = productItemId\n            ingredientItemIds = newIngredients\n        end\n    end\n\n    ---@param permit CoroutinePermit\n    local function refreshContainers(permit)\n        local coreElementIds = core.getElementIdList()\n        ---@type table<number, IndustryHudContainer[]>\n        local loadedContainers = {}\n\n        for i = 1, #coreElementIds do\n            permit.acquire()\n\n            local id = coreElementIds[i]\n\n            if IndustryHudContainer.isContainer(core, id) then\n                local container = IndustryHudContainer.new(core, id, containerProficiencyLvl, containerOptimizationLvl)\n                container.refresh()\n                if container.itemId then\n                    loadedContainers[container.itemId] = loadedContainers[container.itemId] or {}\n                    table.insert(loadedContainers[container.itemId], container)\n                end\n            end\n        end\n\n        containers = loadedContainers\n    end\n\n    local constructPos = construct.getWorldPosition()\n    local constructRight = construct.getWorldRight()\n    local constructForward = construct.getWorldForward()\n    local constructUp = construct.getWorldUp()\n\n    local inColorR, inColorG, inColorB = 51, 133, 255\n    local outColorR, outColorG, outColorB = 0, 255, 128\n\n    ---@param container IndustryHudContainer\n    ---@return string\n    local function highlightContainer(container, isOutput)\n        local elementPos = core.getElementPositionById(container.id)\n        local screenPos = library.getPointOnScreen(ConvertLocalToWorld(elementPos, constructPos, constructRight, constructForward, constructUp))\n        local r, g, b\n        if isOutput then\n            r, g, b = outColorR, outColorG, outColorB\n        else\n            r, g, b = inColorR, inColorG, inColorB\n        end\n\n        return '<div style=\"text-align:center;position:absolute;left:' .. utils.round(screenPos[1] * 100)\n                .. [[%;top:]] .. utils.round(screenPos[2] * 100) .. [[%;color:rgb(]] .. r .. [[,]]\n                .. g .. [[,]] .. b\n                .. [[);margin-left:-500px;width:1000px;\"><div style=\"width:fit-content;padding:5px;margin:auto;border:2px solid black;border-radius:10px;background-color:rgba(100,100,100,.5);\">]]\n                .. container.itemName .. [[<br>]]\n                .. container.percent .. [[%</div></div>]]\n    end\n\n    local showHud = true\n    local hudHtml = ''\n    local function updateHud()\n        if showHud then\n            local containers = containers\n            if not containers then\n                return\n            end\n\n            local html = ''\n            local outputItemId = outputItemId\n            if outputItemId then\n                local outputContainers = containers[outputItemId]\n                if outputContainers then\n                    for _, container in ipairs(outputContainers) do\n                        html = html .. highlightContainer(container, true)\n                    end\n                end\n            end\n\n            local ingredientItemIds = ingredientItemIds\n            if ingredientItemIds then\n                for _, ingredientItemId in ipairs(ingredientItemIds) do\n                    local ingredientContainers = containers[ingredientItemId]\n                    if ingredientContainers then\n                        for _, container in ipairs(ingredientContainers) do\n                            html = html .. highlightContainer(container, false)\n                        end\n                    end\n                end\n            end\n\n            hudHtml = html\n        end\n    end\n\n    self.hasHud = true\n    ---@return string\n    function self.drawHud()\n        if showHud then\n            return hudHtml\n        else\n            return ''\n        end\n    end\n\n    local function onStartOption3()\n        showHud = not showHud\n    end\n\n    ---@param state State\n    function self.start(state)\n        state.registerTimer('RecipeContainerHighlighter_updateUi', 0.1, updateHud)\n        state.registerCoroutine(self, 'RecipeContainerHighlighter_init', refreshContainers, true)\n        state.registerHandler(system, SYSTEM_EVENTS.ACTION_START, DuLuacUtils.createHandler({\n            [LUA_ACTIONS.OPTION3] = onStartOption3\n        }))\n    end\n\n    return setmetatable(self, RecipeContainerHighlighter)\nend; end)"},{"key":20,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:IndustryHudMaster/services/IndustryManager'] = (function (...) require('du-industry-hud:du_lib/utils/duluac')\n\nlocal strSplit = require('du-industry-hud:du_lib/utils/fn_strSplit')\n\n---@class IndustryManager\nIndustryManager = {}\n\n---@param emitter Emitter\n---@param unit ControlUnit\n---@return IndustryManager\nfunction IndustryManager.new(emitter, unit)\n    local self = --[[---@type self]]{}\n\n    ---@param industry IndustryHudMachine\n    ---@param command string\n    function self.executeCommand(industry, command)\n        local nameParts = strSplit(industry.name, '_')\n        if #nameParts == 1 then\n            error(\"Industry name doesn't contain the control channel prefix.\")\n        end\n\n        local channelPrefix = nameParts[1]\n        local controlChannel = channelPrefix .. '_Control'\n\n        local commandParts = strSplit(command, ' ')\n        if #commandParts > 2 then\n            error('Invalid command entered: ' .. command)\n        end\n\n        local id = tostring(industry.id)\n        local actualCommand = commandParts[1] .. '_' .. id\n        if #commandParts == 2 then\n            actualCommand = actualCommand .. '_' .. commandParts[2]\n        end\n\n        local timer = controlChannel .. '_' .. id\n        local sentCount = 1\n        local timerId\n        emitter.send(controlChannel, actualCommand)\n        timerId = unit:onEvent('onTimer', DuLuacUtils.createHandler({\n            [timer] = function()\n                if sentCount == 1 then\n                    unit.stopTimer(timer)\n                    unit:clearEvent('onTimer', timerId)\n                end\n                emitter.send(controlChannel, actualCommand)\n                sentCount = sentCount + 1\n            end\n        }))\n        unit.setTimer(timer, 0.2)\n    end\n\n    return setmetatable(self, IndustryManager)\nend; end)"},{"key":21,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:du_lib/utils/fn_secondsToClockString'] = (function (...) ---@param seconds number\n---@return string\nlocal function secondsToClockString(seconds)\n    local seconds = tonumber(seconds)\n\n    if seconds == nil or seconds <= 0 then\n        return \"-\";\n    else\n        local days = string.format(\"%2.f\", math.floor(seconds/(3600*24)));\n        local hours = string.format(\"%2.f\", math.floor(seconds/3600 - (days*24)));\n        local mins = string.format(\"%2.f\", math.floor(seconds/60 - (hours*60) - (days*24*60)));\n        local secs = string.format(\"%2.f\", math.floor(seconds - hours*3600  - (days*24*60*60) - mins *60));\n        local str = \"\"\n        if tonumber(days) > 0 then str = str .. days..\"d \" end\n        if tonumber(hours) > 0 then str = str .. hours..\"h \" end\n        if tonumber(mins) > 0 then str = str .. mins..\"m \" end\n        if tonumber(secs) > 0 then str = str .. secs ..\"s\" end\n        return str\n    end\nend\n\nreturn secondsToClockString; end)"},{"key":22,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:IndustryHudMaster/model/IndustryHudMachine'] = (function (...) local secondsToClockString = require('du-industry-hud:du_lib/utils/fn_secondsToClockString')\n\n---@class IndustryHudMachine\n---@field id number\n---@field type string\n---@field typeWithSize string\n---@field tier number\n---@field size string\n---@field itemId number\n---@field name string\n---@field status string\n---@field productId number\n---@field productName string\n---@field productType string\n---@field unitsProduced number\n---@field remainingTime number\n---@field remainingTimeString string\n---@field mode string\n---@field batchesRequested number\n---@field maintainProductAmount number\nIndustryHudMachine = {}\nIndustryHudMachine.__index = IndustryHudMachine\n\nlocal STATUS_LIST = { \"STOPPED\", \"RUNNING\", \"MISSING INGREDIENT\", \"OUTPUT FULL\", \"NO OUTPUT CONTAINER\", \"PENDING\", \"MISSING SCHEMATIC\" }\n\n---@param core CoreUnit\n---@param id number\n---@return boolean\nfunction IndustryHudMachine.isIndustry(core, id)\n    local elementType = core.getElementDisplayNameById(id):lower()\n    return --[[---@type boolean]] elementType:find(\"assembly line\") or\n            elementType:find(\"glass furnace\") or\n            elementType:find(\"3d printer\") or\n            elementType:find(\"smelter\") or\n            elementType:find(\"recycler\") or\n            elementType:find(\"refinery\") or\n            elementType:find(\"refiner\") or\n            elementType:find(\"industry\")\n                    and (\n                    elementType:find(\"chemical\") or\n                            elementType:find(\"electronics\") or\n                            elementType:find(\"metalwork\")\n            ) or\n            elementType == \"transfer unit\"\nend\n\n---@param system System\n---@param core CoreUnit\n---@param id number\n---@return IndustryHudMachine\nfunction IndustryHudMachine.new(system, core, id)\n    local self = --[[---@type self]] { }\n\n    local itemId = core.getElementItemIdById(id)\n    local item = system.getItem(itemId)\n\n    self.id = id\n    self.type = item.displayName --e.g. \"Basic Assembly Line\" without size\n    self.typeWithSize = item.displayNameWithSize\n    self.tier = item.tier\n    self.size = item.size\n    self.itemId = item.id\n\n    function self.refresh()\n        self.name = core.getElementNameById(id)\n\n        local status = core.getElementIndustryInfoById(self.id)\n\n        local productId = -1\n        local productName = \"-\"\n        local productType = '-'\n        if #status.currentProducts > 0 then\n            productId = status.currentProducts[1].id\n            local item = system.getItem(productId)\n            if item.locDisplayNameWithSize then\n                productName = item.locDisplayNameWithSize\n                productType = item.displayName\n            end\n        end\n\n        self.productId = productId\n        self.productName = productName\n        self.productType = productType\n\n        local remainingTime = 0\n        if (status) and (status.remainingTime) and (status.remainingTime <= (3600 * 24 * 365)) then\n            remainingTime = status.remainingTime\n        end\n        self.remainingTime = remainingTime\n        self.remainingTimeString = secondsToClockString(remainingTime)\n\n        self.status = STATUS_LIST[status.state] or '-'\n        self.unitsProduced = status.unitsProduced or 0\n\n        local mode = \"-\"\n        self.maintainProductAmount = status.maintainProductAmount\n        self.batchesRequested = status.batchesRequested\n        if status.maintainProductAmount > 0 then\n            mode = \"Maintain \" .. math.floor(status.maintainProductAmount)\n        elseif status.batchesRequested > 0 and status.batchesRequested <= 99999999 then\n            mode = \"Produce \" .. math.floor(status.batchesRequested)\n        end\n        self.mode = mode\n    end\n\n    return setmetatable(self, IndustryHudMachine)\nend; end)"},{"key":23,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-industry-hud:IndustryHudMaster/services/IndustryHud'] = (function (...) require('du-industry-hud:du_lib/requires/service')\nrequire('du-industry-hud:du_lib/requires/dataHud')\nrequire('du-industry-hud:du_lib/markers/MarkerManager')\n\nrequire('du-industry-hud:IndustryHudMaster/model/IndustryHudMachine')\nrequire('du-industry-hud:IndustryHudMaster/services/RecipeContainerHighlighter')\nrequire('du-industry-hud:IndustryHudMaster/services/IndustryManager')\n\n---@class IndustryHud : Service\nIndustryHud = {}\nIndustryHud.__index = IndustryHud\n\n---@class IndustryType\nIndustryType = {}\nIndustryType.__index = IndustryType\n\n---@return IndustryType\nfunction IndustryType.new(type, tier)\n    local self = --[[---@type self]] { }\n\n    self.type = type\n    self.tier = tier\n\n    return setmetatable(self, IndustryType)\nend\n\nlocal HEADERS = { 'Id', 'Name', 'Output', 'Cycles From Start', 'Status', 'Mode', 'Time Remaining', 'Quantity' }\nlocal INDUSTRY_MARKER_NAME = 'IndustryHud_selected_industry'\n\n---@param system System\n---@param core CoreUnit\n---@param hud FullDataHud\n---@param recipeContainerHighlighter RecipeContainerHighlighter\n---@param markerManager MarkerManager\n---@param industryManager IndustryManager\n---@return IndustryHud\nfunction IndustryHud.new(system, core, hud, markerManager, recipeContainerHighlighter, industryManager)\n    local self = --[[---@type self]] Service.new()\n\n    ---@type table<string, IndustryHudMachine[]>\n    local industries\n    ---@type string[]\n    local industryTypes\n    local typeSelectedIndex = 1\n    local industrySelectedIndex = 1\n\n    local function updateRecipe()\n        if not industries then\n            return\n        end\n\n        local type = industryTypes[typeSelectedIndex]\n        local typeIndustries = industries[type]\n        local industry = typeIndustries[industrySelectedIndex]\n\n        recipeContainerHighlighter.updateOutput(industry.productId)\n    end\n\n    ---@param permit CoroutinePermit\n    local function refreshIndustries(permit)\n        local coreElementIds = core.getElementIdList()\n        ---@type table<string, IndustryHudMachine[]>\n        local loadedIndustries = {}\n\n        for i = 1, #coreElementIds do\n            permit.acquire()\n\n            local id = coreElementIds[i]\n\n            if IndustryHudMachine.isIndustry(core, id) then\n                local industry = IndustryHudMachine.new(system, core, id)\n                industry.refresh()\n                loadedIndustries[industry.type] = loadedIndustries[industry.type] or {}\n                table.insert(loadedIndustries[industry.type], industry)\n            end\n        end\n\n        ---@type IndustryType[]\n        local typesWithInfo = {}\n\n        for type, typeIndustries in pairs(loadedIndustries) do\n            local industry1 = typeIndustries[1]\n            table.insert(typesWithInfo, IndustryType.new(type, industry1.tier))\n\n            table.sort(typeIndustries, function(l, r)\n                return l.productName < r.productName\n                        or (l.productName == r.productName and l.typeWithSize < r.typeWithSize)\n            end)\n        end\n\n        table.sort(typesWithInfo, function(l, r)\n            return l.tier > r.tier or (l.tier == r.tier and l.type > r.type)\n        end)\n\n        local loadedTypes = {}\n        for _, type in ipairs(typesWithInfo) do\n            table.insert(loadedTypes, type.type)\n        end\n\n        industryTypes, industries = loadedTypes, loadedIndustries\n        updateRecipe()\n    end\n\n    local function updateHud()\n        if not industries then\n            return\n        end\n\n        local type = industryTypes[typeSelectedIndex]\n        local typeIndustries = industries[type]\n\n        local industry = typeIndustries[industrySelectedIndex]\n        markerManager.setElementMarker(INDUSTRY_MARKER_NAME, industry.id)\n\n        local rows = {}\n        for _, ind in ipairs(typeIndustries) do\n            local quantity = recipeContainerHighlighter.getTotal(ind.productId)\n            ind.refresh()\n            table.insert(rows, {\n                ind.id, ind.typeWithSize, ind.productName,\n                ind.unitsProduced, ind.status, ind.mode,\n                ind.remainingTimeString,\n                string.format('%.0f', quantity)\n            })\n        end\n\n        local data = FullDataHudData.new('Industry HUD', HEADERS, rows, industryTypes)\n        hud.updateData(data)\n    end\n\n    ---@type IndustryHudMachine\n    local commandIndustry\n    local function selectType(_, selectedIndex)\n        typeSelectedIndex = selectedIndex\n        commandIndustry = nil\n    end\n\n    ---@param selectedIndex number\n    local function selectIndustry(_, selectedIndex)\n        industrySelectedIndex = selectedIndex\n        commandIndustry = nil\n\n        updateRecipe()\n    end\n\n    ---@param selectedTypeIndex number\n    ---@param selectedIndustryIndex number\n    local function onDetailActionLeft(_, selectedTypeIndex, selectedIndustryIndex)\n        if not industries then\n            return\n        end\n\n        local type = industryTypes[selectedTypeIndex]\n        local typeIndustries = industries[type]\n        local industry = typeIndustries[selectedIndustryIndex]\n\n        for i, industryType in ipairs(industryTypes) do\n            for j, factoryBuilder in ipairs(industries[industryType]) do\n                if factoryBuilder.productId == industry.itemId then\n                    hud.setSelected(i, j)\n                end\n            end\n        end\n    end\n\n    ---@param selectedTypeIndex number\n    ---@param selectedIndustryIndex number\n    local function onDetailActionRight(_, selectedTypeIndex, selectedIndustryIndex)\n        if not industries then\n            return\n        end\n\n        local type = industryTypes[selectedTypeIndex]\n        local typeIndustries = industries[type]\n        local industry = typeIndustries[selectedIndustryIndex]\n\n        for i, industryType in ipairs(industryTypes) do\n            if industryType == industry.productType then\n                hud.setSelected(i, 1)\n            end\n        end\n    end\n\n    ---@param selectedTypeIndex number\n    ---@param selectedIndustryIndex number\n    local function onDetailActionDown(_, selectedTypeIndex, selectedIndustryIndex)\n        system.print('Please enter a command for current industry:')\n        local type = industryTypes[selectedTypeIndex]\n        local typeIndustries = industries[type]\n        commandIndustry = typeIndustries[selectedIndustryIndex]\n    end\n\n    local function onInputText(_, text)\n        if commandIndustry then\n            industryManager.executeCommand(commandIndustry, text)\n            commandIndustry = nil\n        end\n    end\n\n    self.hasHud = true\n    ---@return string\n    function self.drawHud()\n        return hud.drawHud() .. recipeContainerHighlighter.drawHud()\n    end\n\n    ---@param state State\n    function self.start(state)\n        state.registerCoroutine(self, 'IndustryHud_init', refreshIndustries, true)\n        state.registerTimer('IndustryHud_refresh', 1, updateHud)\n        state.registerHandler(hud, FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectType)\n        state.registerHandler(hud, FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectIndustry)\n        state.registerHandler(hud, FULL_DATA_HUD_EVENTS.DETAIL_ACTION_LEFT, onDetailActionLeft)\n        state.registerHandler(hud, FULL_DATA_HUD_EVENTS.DETAIL_ACTION_RIGHT, onDetailActionRight)\n        state.registerHandler(hud, FULL_DATA_HUD_EVENTS.DETAIL_ACTION_DOWN, onDetailActionDown)\n\n        state.registerHandler(system, SYSTEM_EVENTS.INPUT_TEXT, onInputText)\n    end\n\n    return setmetatable(self, IndustryHud)\nend; end)"},{"key":24,"filter":{"slotKey":-4,"signature":"onActionStart(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionStart\",action)"},{"key":25,"filter":{"slotKey":-4,"signature":"onActionLoop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionLoop\",action)"},{"key":26,"filter":{"slotKey":-4,"signature":"onActionStop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionStop\",action)"},{"key":27,"filter":{"slotKey":-4,"signature":"onUpdate()","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onUpdate\")"},{"key":28,"filter":{"slotKey":-4,"signature":"onFlush()","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onFlush\")"},{"key":29,"filter":{"slotKey":-4,"signature":"onInputText(text)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onInputText\",text)"},{"key":30,"filter":{"slotKey":-4,"signature":"onCameraChanged(mode)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onCameraChanged\",mode)"},{"key":31,"filter":{"slotKey":-3,"signature":"onParentChanged(oldId,newId)","args":[{"variable":"*"},{"variable":"*"}]},"code":"player:triggerEvent(\"onParentChanged\",oldId,newId)"},{"key":32,"filter":{"slotKey":-2,"signature":"onDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onDocked\",id)"},{"key":33,"filter":{"slotKey":-2,"signature":"onUndocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onUndocked\",id)"},{"key":34,"filter":{"slotKey":-2,"signature":"onPlayerBoarded(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onPlayerBoarded\",id)"},{"key":35,"filter":{"slotKey":-2,"signature":"onVRStationEntered(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onVRStationEntered\",id)"},{"key":36,"filter":{"slotKey":-2,"signature":"onConstructDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onConstructDocked\",id)"},{"key":37,"filter":{"slotKey":-2,"signature":"onPvPTimer(active)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onPvPTimer\",active)"},{"key":38,"filter":{"slotKey":-1,"signature":"onStart()","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onStart\")"},{"key":39,"filter":{"slotKey":-1,"signature":"onStop()","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onStop\")"},{"key":40,"filter":{"slotKey":-1,"signature":"onTimer(timerId)","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onTimer\",timerId)"},{"key":41,"filter":{"slotKey":0,"signature":"onStressChanged(stress)","args":[{"variable":"*"}]},"code":"core:triggerEvent(\"onStressChanged\",stress)"},{"key":42,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"-- Setup improved event handlers\nif not __EVENTS then\nlibrary.addEventHandlers(library)\nlibrary.addEventHandlers(system)\nlibrary.addEventHandlers(player)\nlibrary.addEventHandlers(construct)\nlibrary.addEventHandlers(unit)\nlibrary.addEventHandlers(core)\n__EVENTS=true\nend"},{"key":43,"filter":{"slotKey":-1,"signature":"onStart()","args":[{"variable":"*"}]},"code":"require('du-industry-hud:du_lib/requires/service')\nrequire('du-industry-hud:du_lib/requires/dataHud')\nrequire('du-industry-hud:du_lib/markers/MarkerManager')\n\nrequire('du-industry-hud:IndustryHudMaster/services/RecipeContainerHighlighter')\nrequire('du-industry-hud:IndustryHudMaster/services/IndustryManager')\nrequire('du-industry-hud:IndustryHudMaster/services/IndustryHud')\n\n\n\nlocal workPerTick=1000 --export: coroutine amount of work done per tick\n\n\nlocal workTickInterval=0.1 --export: coroutine interval between ticks\n\n\nlocal contentFontSize=15 --export: size of the font of the content of all panels in pixels\n\n\nlocal elementsByPage=20 --export: maximum amount of elements displayed on a single page\n\n\nlocal groupsByPage=10 --export: maximum amount of groups displayed per page\n\n\n--need to convert this to use the talent level db\n\nlocal containerProficiencyLvl=0 --export: talent level\n\n\nlocal containerOptimizationLvl=0 --export: talent level\n\n\n\nemitter = emitter\n\n\nlocal markerManager = MarkerManager.new(core, unit)\nlocal recipeContainerHighlighter = RecipeContainerHighlighter.new(system, core, containerProficiencyLvl, containerOptimizationLvl)\nlocal industryManager = IndustryManager.new(emitter, unit)\nlocal hud = FullDataHud.new(system, contentFontSize, elementsByPage, groupsByPage)\nlocal industryHud = IndustryHud.new(system, core, hud, markerManager, recipeContainerHighlighter, industryManager)\n\nlocal services = { industryHud, hud, markerManager, recipeContainerHighlighter }\n\nState.new(services, unit, system, workPerTick, workTickInterval).start()"}],"methods":[],"events":[]}